/**
 * VFS Auto Backup Integration
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç VFS –¥–∞–Ω–Ω—ã–µ –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ API
 */

class VFSAutoBackup {
    constructor(options = {}) {
        this.apiEndpoint = options.apiEndpoint || '/api/v1/vfs/backup';
        this.backupInterval = options.backupInterval || 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
        this.autoBackupEnabled = options.autoBackupEnabled || true;
        this.debug = options.debug || false;
        
        this.init();
    }
    
    init() {
        this.log('VFS Auto Backup initialized');
        
        if (this.autoBackupEnabled) {
            this.setupAutoBackup();
        }
        
        this.setupEventListeners();
    }
    
    setupAutoBackup() {
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π backup
        setInterval(() => {
            this.createBackup('scheduled');
        }, this.backupInterval);
        
        this.log(`Auto backup scheduled every ${this.backupInterval / 1000 / 60} minutes`);
    }
    
    setupEventListeners() {
        // Backup –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.createBackup('page_close');
        });
        
        // Backup –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏)
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'hidden') {
                this.createBackup('focus_lost');
            }
        });
        
        // Backup –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ VFS –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è)
        if (window.vfs && window.vfs.addEventListener) {
            window.vfs.addEventListener('dataChanged', () => {
                this.debounceBackup('data_changed');
            });
        }
    }
    
    debounceBackup(reason) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ backup'—ã
        clearTimeout(this.debounceTimer);
        this.debounceTimer = setTimeout(() => {
            this.createBackup(reason);
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
    }
    
    async createBackup(reason = 'manual') {
        try {
            const vfsData = this.extractVFSData();
            
            if (!vfsData || Object.keys(vfsData).length === 0) {
                this.log('No VFS data to backup');
                return;
            }
            
            const backupPayload = {
                reason,
                timestamp: new Date().toISOString(),
                user_agent: navigator.userAgent,
                url: window.location.href,
                vfs_data: vfsData
            };
            
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(backupPayload)
            });
            
            if (response.ok) {
                const result = await response.json();
                this.log(`Backup successful: ${result.backup_file}`, result);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                this.showNotification('VFS –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', 'success');
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
        } catch (error) {
            this.log(`Backup failed: ${error.message}`, error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è VFS –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }
    
    extractVFSData() {
        const vfsData = {};
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('vfs_')) {
                try {
                    const value = localStorage.getItem(key);
                    vfsData[key] = JSON.parse(value);
                } catch (e) {
                    // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    vfsData[key] = localStorage.getItem(key);
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        vfsData._metadata = {
            extraction_time: new Date().toISOString(),
            browser: navigator.userAgent,
            url: window.location.href,
            storage_size: JSON.stringify(vfsData).length
        };
        
        return vfsData;
    }
    
    async listBackups() {
        try {
            const response = await fetch('/api/v1/vfs/backups');
            if (response.ok) {
                const result = await response.json();
                return result.backups;
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            this.log(`Failed to list backups: ${error.message}`, error);
            return [];
        }
    }
    
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ console
        if (this.debug) {
            console.log(`[VFS Backup] ${message}`);
        }
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (window.showToast) {
            window.showToast(message, type);
        }
    }
    
    log(message, data = null) {
        if (this.debug) {
            console.log(`[VFS Auto Backup] ${message}`, data);
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async manualBackup() {
        return await this.createBackup('manual');
    }
    
    enableAutoBackup() {
        this.autoBackupEnabled = true;
        this.setupAutoBackup();
        this.log('Auto backup enabled');
    }
    
    disableAutoBackup() {
        this.autoBackupEnabled = false;
        this.log('Auto backup disabled');
    }
    
    setBackupInterval(minutes) {
        this.backupInterval = minutes * 60 * 1000;
        if (this.autoBackupEnabled) {
            this.setupAutoBackup();
        }
        this.log(`Backup interval set to ${minutes} minutes`);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.VFSAutoBackup = VFSAutoBackup;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤ Open Web UI
if (window.location.href.includes('open-webui') || window.localStorage.getItem('vfs_projects')) {
    window.vfsBackup = new VFSAutoBackup({
        debug: true,
        autoBackupEnabled: true,
        backupInterval: 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    window.vfsBackupNow = () => window.vfsBackup.manualBackup();
    window.vfsListBackups = () => window.vfsBackup.listBackups();
    
    console.log('üîÑ VFS Auto Backup –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    console.log('–ö–æ–º–∞–Ω–¥—ã: vfsBackupNow(), vfsListBackups()');
} 