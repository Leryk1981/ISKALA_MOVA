#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É APIResolverV2 + UniversalToolConnector
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src
sys.path.append(str(Path(__file__).parent / "src"))

from integrated_tool_system import IntegratedToolSystem, process_intent, get_available_tools

async def test_integration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Integrated Tool System")
    print("=" * 50)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    print("\n1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏...")
    try:
        tool_system = IntegratedToolSystem()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        return
    
    # –¢–µ—Å—Ç 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    print("\n2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤...")
    try:
        tools = await get_available_tools()
        print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥: {tools.get('total_catalog', 0)} —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤")
        print(f"‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä: {tools.get('total_connector', 0)} —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤")
        
        if tools.get('connector_tools'):
            print("\n   –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ñ:")
            for tool in tools['connector_tools'][:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
                print(f"   - {tool.get('id', 'N/A')}: {tool.get('description', 'N/A')}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {e}")
    
    # –¢–µ—Å—Ç 2: –û–±—Ä–æ–±–∫–∞ –Ω–∞–º—ñ—Ä—É (–ø–µ—Ä–µ–∫–ª–∞–¥)
    print("\n3. –¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –Ω–∞–º—ñ—Ä—É (–ø–µ—Ä–µ–∫–ª–∞–¥)...")
    try:
        result = await process_intent(
            intent_text="–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É",
            context={
                "text": "–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!",
                "target_language": "en"
            },
            user_id="test_user",
            session_id="test_session",
            graph_context="translation"
        )
        
        print(f"‚úÖ –£—Å–ø—ñ—Ö: {result.get('success')}")
        print(f"‚úÖ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {result.get('tool_used', 'N/A')}")
        print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥: {result.get('tool_rating', 'N/A')}")
        print(f"‚úÖ –ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {result.get('selection_origin', 'N/A')}")
        
        if result.get('execution_details', {}).get('error'):
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {result['execution_details']['error']}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–∞–º—ñ—Ä—É: {e}")
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–æ–±–∫–∞ –Ω–∞–º—ñ—Ä—É (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ)
    print("\n4. –¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –Ω–∞–º—ñ—Ä—É (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ)...")
    try:
        result = await process_intent(
            intent_text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É",
            context={
                "content": "–¢–µ—Å—Ç–æ–≤–∞ –∑–∞–¥–∞—á–∞",
                "project_id": "test_project"
            },
            user_id="test_user",
            session_id="test_session",
            graph_context="task_management"
        )
        
        print(f"‚úÖ –£—Å–ø—ñ—Ö: {result.get('success')}")
        print(f"‚úÖ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {result.get('tool_used', 'N/A')}")
        print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥: {result.get('tool_rating', 'N/A')}")
        
        if result.get('execution_details', {}).get('error'):
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {result['execution_details']['error']}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–∞–º—ñ—Ä—É: {e}")
    
    # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n5. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        from integrated_tool_system import get_tool_statistics
        stats = await get_tool_statistics()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {stats.get('system_status', 'N/A')}")
        
        if 'api_statistics' in stats:
            api_stats = stats['api_statistics']
            print(f"‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å API: {api_stats.get('total_apis', 'N/A')}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_integration()) 