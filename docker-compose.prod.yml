# Удаляем устаревший атрибут version для современного Docker Compose
services:
  # Neo4j Graph Database - Production Configuration
  neo4j:
    image: neo4j:5.13-enterprise
    container_name: iskala-neo4j-prod
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP UI (only for monitoring)
      - "7687:7687"  # Bolt protocol
    environment:
      # Security
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-iskala_prod_neo4j_2024!}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      
      # Memory configuration for production
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL:-2g}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_MAX:-4g}
      NEO4J_dbms_memory_pagecache_size: 2g
      
      # Performance settings
      NEO4J_dbms_transaction_timeout: 120s
      NEO4J_dbms_locks_acquisition_timeout: 60s
      NEO4J_dbms_checkpoint_interval_time: 300s
      
      # Security configuration
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*,gds.*"
      NEO4J_dbms_security_auth_enabled: "true"
      
      # Network settings
      NEO4J_dbms_default__listen__address: "0.0.0.0"
      NEO4J_dbms_connector_bolt_listen__address: "0.0.0.0:7687"
      NEO4J_dbms_connector_http_listen__address: "0.0.0.0:7474"
      
      # APOC configuration
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      
      # Plugins
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      
      # Database settings
      NEO4J_dbms_default__database: "iskala-mova"
      NEO4J_dbms_databases_default__to__read__only: "false"
      
      # Logging
      NEO4J_dbms_logs_query_enabled: "true"
      NEO4J_dbms_logs_query_threshold: "1s"
      
    volumes:
      # Persistent data storage
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - neo4j_conf:/var/lib/neo4j/conf
      
    networks:
      - iskala_network
      
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
          
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-iskala_prod_neo4j_2024!}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: iskala-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-iskala_prod_redis_2024!}
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-iskala_prod_redis_2024!}
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
    volumes:
      - redis_data:/data
    networks:
      - iskala_network
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ISKALA Graph Search Service - Production Build
  graph_search:
    build:
      context: ./iskala_graph
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=production
        - BUILD_VERSION=${BUILD_VERSION:-1.0.0}
    # Убираем container_name для поддержки replicas
    # Docker Compose автоматически создаст имена: iskala_graph_search_1, iskala_graph_search_2
    restart: unless-stopped
    ports:
      - "8004-8005:8004"  # Диапазон портов для реплик
    environment:
      # Service configuration
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Neo4j connection
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-iskala_prod_neo4j_2024!}
      NEO4J_DATABASE: iskala-mova
      
      # Redis connection
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-iskala_prod_redis_2024!}
      REDIS_DB: 0
      
      # Performance settings
      EMBEDDING_BATCH_SIZE: 16
      SEARCH_CACHE_TTL: 3600
      MAX_CONCURRENT_REQUESTS: 100
      
      # Security
      ENABLE_API_KEY_AUTH: ${ENABLE_API_KEY_AUTH:-false}
      API_KEYS: ${API_KEYS:-}
      
      # Monitoring
      ENABLE_METRICS: "true"
      METRICS_PORT: 9090
      
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
        
    networks:
      - iskala_network
      
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ISKALA Tool Server with Graph Integration - Production
  tool_server:
    build:
      context: .
      dockerfile: Dockerfile.toolserver.prod
      args:
        - BUILD_ENV=production
    container_name: iskala-tool-server-prod
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      # Service configuration
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Integration endpoints
      GRAPH_SEARCH_URL: http://graph_search:8004
      ISKALA_CORE_URL: http://iskala-core:8001
      
      # Security
      ENABLE_API_KEY_AUTH: ${ENABLE_API_KEY_AUTH:-true}
      API_KEYS: ${API_KEYS:-}
      
      # Rate limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      
    depends_on:
      graph_search:
        condition: service_healthy
        
    networks:
      - iskala_network
      
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
          
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: iskala-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - iskala_network
    depends_on:
      - graph_search
      - tool_server
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

# Monitoring Stack (Optional - uncomment for full monitoring)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: iskala-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090" 
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - iskala_network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: iskala-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-iskala_grafana_2024!}
  #     GF_USERS_ALLOW_SIGN_UP: "false"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
  #     - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
  #   networks:
  #     - iskala_network

networks:
  iskala_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

volumes:
  # Neo4j volumes
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j/data
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j/logs
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  neo4j_conf:
    driver: local
    
  # Redis volume
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
      
  # Nginx cache
  nginx_cache:
    driver: local
    
  # Monitoring volumes (if enabled)
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local 