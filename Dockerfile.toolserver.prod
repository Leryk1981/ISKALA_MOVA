# Production Dockerfile for ISKALA Tool Server with Graph Integration
# Multi-stage build for optimal security and performance

# =====================================
# Stage 1: Dependencies Builder
# =====================================
FROM python:3.11-slim as builder

LABEL maintainer="ISKALA MOVA Team" \
      description="ISKALA Tool Server - Builder Stage" \
      version="1.0.0"

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libc6-dev \
    libffi-dev \
    libssl-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --user -r requirements.txt

# Install additional dependencies for Tool Server
RUN pip install --no-cache-dir --user \
    fastapi \
    uvicorn[standard] \
    gunicorn \
    requests \
    pydantic \
    python-multipart \
    prometheus-client \
    slowapi \
    psutil

# =====================================
# Stage 2: Production Runtime
# =====================================
FROM python:3.11-slim as production

LABEL maintainer="ISKALA MOVA Team" \
      description="ISKALA Tool Server with Graph Integration" \
      version="1.0.0"

# Build arguments
ARG BUILD_ENV=production
ARG BUILD_VERSION=1.0.0

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PATH="/home/iskala/.local/bin:$PATH" \
    BUILD_ENV=${BUILD_ENV} \
    BUILD_VERSION=${BUILD_VERSION}

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    dumb-init \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r iskala && useradd -r -g iskala -s /bin/bash iskala && \
    mkdir -p /home/iskala && chown -R iskala:iskala /home/iskala

WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/iskala/.local

# Copy application code
COPY --chown=iskala:iskala iskala_openapi_server.py ./
COPY --chown=iskala:iskala iskala_graph_integration/ ./iskala_graph_integration/
COPY --chown=iskala:iskala src/ ./src/
COPY --chown=iskala:iskala system_prompts/ ./system_prompts/
COPY --chown=iskala:iskala tool_api/ ./tool_api/

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/state && \
    chown -R iskala:iskala /app

# Switch to non-root user
USER iskala

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8003/health || exit 1

# Expose port
EXPOSE 8003

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start with Gunicorn for production
CMD ["gunicorn", "iskala_openapi_server:app", \
     "--bind", "0.0.0.0:8003", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--workers", "2", \
     "--worker-connections", "500", \
     "--max-requests", "5000", \
     "--timeout", "60", \
     "--keep-alive", "2", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log", \
     "--log-level", "info"] 