#!/usr/bin/env python3
"""
ISKALA Cache Fix Script
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º Open WebUI
"""

import subprocess
import time
import requests
import json
import os
from pathlib import Path

def run_command(command, shell=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=shell, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_service(url, timeout=5):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(url, timeout=timeout)
        return response.status_code == 200
    except:
        return False

def main():
    print("üå∫ ISKALA Cache Fix Script")
    print("=" * 50)
    
    # –®–∞–≥ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Open WebUI
    print("\n1Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Open WebUI...")
    success, stdout, stderr = run_command("docker-compose stop open-webui")
    if success:
        print("   ‚úÖ Open WebUI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:", stderr)
    
    # –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ volume —Å –¥–∞–Ω–Ω—ã–º–∏
    print("\n2Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    success, stdout, stderr = run_command("docker volume rm iskala-mova_open-webui-data")
    if success:
        print("   ‚úÖ Volume —Å –¥–∞–Ω–Ω—ã–º–∏ —É–¥–∞–ª–µ–Ω")
    else:
        print("   ‚ö†Ô∏è  Volume –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω")
    
    # –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞
    print("\n3Ô∏è‚É£ –û—á–∏—â–∞–µ–º Docker –∫—ç—à...")
    success, stdout, stderr = run_command("docker system prune -f")
    if success:
        print("   ‚úÖ Docker –∫—ç—à –æ—á–∏—â–µ–Ω")
    else:
        print("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Docker –∫—ç—à–∞:", stderr)
    
    # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose.yml —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫—ç—à–∞
    print("\n4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cache_vars = """
      # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å JS —Ñ–∞–π–ª–∞–º–∏
      - DISABLE_CACHE=true
      - CACHE_CONTROL=no-cache
      - ETAG_DISABLED=true
      - MODELS_CACHE_TTL=0
      - WEBUI_SESSION_COOKIE_SAME_SITE=none
      - WEBUI_SESSION_COOKIE_SECURE=false
"""
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π docker-compose.yml
    compose_file = "docker-compose.yml"
    if os.path.exists(compose_file):
        with open(compose_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ ENABLE_LOGGING
        if "ENABLE_LOGGING=true" in content and "DISABLE_CACHE=true" not in content:
            content = content.replace(
                "ENABLE_LOGGING=true",
                "ENABLE_LOGGING=true" + cache_vars
            )
            
            with open(compose_file, 'w', encoding='utf-8') as f:
                f.write(content)
            print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("   ‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞")
    
    # –®–∞–≥ 5: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Open WebUI
    print("\n5Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º Open WebUI —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
    success, stdout, stderr = run_command("docker-compose up -d open-webui")
    if success:
        print("   ‚úÖ Open WebUI –∑–∞–ø—É—â–µ–Ω")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", stderr)
        return
    
    # –®–∞–≥ 6: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    print("\n6Ô∏è‚É£ –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
    for i in range(30):
        if check_service("http://localhost:3000"):
            print(f"   ‚úÖ Open WebUI –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {i+1} —Å–µ–∫—É–Ω–¥")
            break
        time.sleep(1)
        if i % 5 == 0:
            print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i+1}/30)")
    else:
        print("   ‚ùå Open WebUI –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
        return
    
    # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —Ñ–∞–π–ª–æ–≤
    print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript —Ñ–∞–π–ª—ã...")
    js_files = [
        "/_app/immutable/entry/start.BD0sJqPm.js",
        "/_app/immutable/entry/app.DzAV6zKd.js",
        "/_app/immutable/chunks/CIUdcGrV.js"
    ]
    
    all_files_ok = True
    for js_file in js_files:
        if check_service(f"http://localhost:3000{js_file}"):
            print(f"   ‚úÖ {js_file}")
        else:
            print(f"   ‚ùå {js_file}")
            all_files_ok = False
    
    # –®–∞–≥ 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n8Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    if all_files_ok:
        print("   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("\nüéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∞!")
        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞: Ctrl+Shift+Delete")
        print("2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ")
        print("3. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000")
        print("4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä")
    else:
        print("   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs open-webui")
        print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ")
    
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
    services = [
        ("Open WebUI", "http://localhost:3000"),
        ("ISKALA Core", "http://localhost:8001/health"),
        ("OpenAPI Tool Server", "http://localhost:8003")
    ]
    
    for name, url in services:
        status = "‚úÖ" if check_service(url) else "‚ùå"
        print(f"   {status} {name}")

if __name__ == "__main__":
    main() 