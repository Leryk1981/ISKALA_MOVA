"""
Integrated Tool System - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ APIResolverV2 –∏ UniversalToolConnector

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:
- APIResolverV2: —É–º–Ω—ã–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç—å—é
- UniversalToolConnector: –Ω–∞–¥–µ–∂–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
1. APIResolverV2 –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
2. UniversalToolConnector –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≥—Ä–∞—Ñ–æ–≤—É—é –ø–∞–º—è—Ç—å –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ tool_api –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ UniversalToolConnector
sys.path.append(str(Path(__file__).parent.parent / "tool_api"))

from api_resolver_v2 import APIResolverV2, Intent, APISelection
from tool_api.connectors.universal_connector import UniversalToolConnector

logger = logging.getLogger(__name__)

class IntegratedToolSystem:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, 
                 catalog_path: str = "./tool_api_catalog",
                 graph_path: str = "./graph_memory",
                 log_path: str = "./logs",
                 tools_dir: str = "./tool_api/tools"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            catalog_path: –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É API
            graph_path: –ø—É—Ç—å –∫ –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏
            log_path: –ø—É—Ç—å –∫ –ª–æ–≥–∞–º
            tools_dir: –ø—É—Ç—å –∫ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        # –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.resolver = APIResolverV2(
            catalog_path=catalog_path,
            graph_path=graph_path,
            log_path=log_path
        )
        
        # –°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.executor = UniversalToolConnector(tools_dir=tools_dir)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
        self.executor.load_secrets()
        
        logger.info("‚úÖ Integrated Tool System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def process_intent(self, 
                           intent_text: str, 
                           context: Dict[str, Any] = None,
                           user_id: str = None,
                           session_id: str = None,
                           graph_context: str = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è: –≤—ã–±–æ—Ä + –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        Args:
            intent_text: —Ç–µ–∫—Å—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            context: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id: ID —Å–µ—Å—Å–∏–∏
            graph_context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            intent = Intent(
                text=intent_text,
                semantic_description=intent_text,
                constraints=context or {},
                user_id=user_id,
                session_id=session_id,
                graph_context=graph_context
            )
            
            # 2. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            logger.info(f"üîç –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è: {intent_text}")
            api_selection = await self.resolver.resolve_api(intent)
            
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {api_selection.api_tool} "
                       f"(—Ä–µ–π—Ç–∏–Ω–≥: {api_selection.preferred_score:.2f})")
            
            # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {api_selection.api_tool}")
            execution_result = self.executor.execute_tool_api(
                tool_api=self._build_tool_api_from_selection(api_selection),
                context=api_selection.params
            )
            
            # 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä–∞—Ñ–æ–≤—É—é –ø–∞–º—è—Ç—å
            if graph_context:
                self.resolver.graph_memory.record_execution(
                    intent=intent_text,
                    graph_context=graph_context,
                    api_selection=api_selection,
                    success=execution_result.get('success', False),
                    user_rating=self._calculate_user_rating(execution_result)
                )
            
            # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                "success": execution_result.get('success', False),
                "data": execution_result.get('data'),
                "tool_used": api_selection.api_tool,
                "tool_rating": api_selection.preferred_score,
                "selection_origin": api_selection.origin,
                "explanation": api_selection.explanation,
                "execution_details": {
                    "status_code": execution_result.get('status_code'),
                    "tool_id": execution_result.get('tool_id'),
                    "error": execution_result.get('error')
                },
                "metadata": {
                    "user_id": user_id,
                    "session_id": session_id,
                    "graph_context": graph_context,
                    "timestamp": asyncio.get_event_loop().time()
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e),
                "tool_used": None,
                "data": None
            }
    
    def _build_tool_api_from_selection(self, api_selection: APISelection) -> Dict[str, Any]:
        """
        –°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ –≤—ã–±–æ—Ä–∞ APIResolverV2
        
        Args:
            api_selection: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ API
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è UniversalToolConnector
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
        try:
            tool_id = api_selection.api_tool
            return self.executor.load_tool_api(tool_id)
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            return {
                "id": api_selection.api_tool,
                "url": api_selection.endpoint,
                "method": "POST",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "headers": {},
                "input_schema": {},
                "output_schema": {}
            }
    
    def _calculate_user_rating(self, execution_result: Dict[str, Any]) -> Optional[float]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            execution_result: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 0.0 –¥–æ 1.0 –∏–ª–∏ None
        """
        if not execution_result.get('success'):
            return 0.0
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ = –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        status_code = execution_result.get('status_code', 0)
        if 200 <= status_code < 300:
            return 0.9
        elif 300 <= status_code < 400:
            return 0.7
        else:
            return 0.5
    
    async def get_available_tools(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_tools = []
            for api_name, api_metadata in self.resolver.catalog.apis.items():
                catalog_tools.append({
                    "name": api_name,
                    "source": api_metadata.source,
                    "endpoint": api_metadata.endpoint,
                    "rating": api_metadata.rating,
                    "reliability": api_metadata.reliability,
                    "functions": api_metadata.functions,
                    "keywords": api_metadata.keywords
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ UniversalToolConnector
            connector_tools = []
            tools_dir = Path(self.executor.tools_dir)
            for tool_file in tools_dir.glob("*.json"):
                try:
                    tool_config = self.executor.load_tool_api(tool_file.stem)
                    connector_tools.append({
                        "id": tool_config.get("id"),
                        "description": tool_config.get("description"),
                        "intent": tool_config.get("intent"),
                        "method": tool_config.get("method"),
                        "url": tool_config.get("url")
                    })
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {tool_file}: {e}")
            
            return {
                "catalog_tools": catalog_tools,
                "connector_tools": connector_tools,
                "total_catalog": len(catalog_tools),
                "total_connector": len(connector_tools)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return {"error": str(e)}
    
    async def get_tool_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ APIResolverV2
            api_stats = self.resolver.get_api_statistics()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏
            graph_stats = {
                "total_executions": len(self.resolver.graph_memory.executions),
                "contexts": list(self.resolver.graph_memory.executions.keys())
            }
            
            return {
                "api_statistics": api_stats,
                "graph_statistics": graph_stats,
                "system_status": "operational"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
integrated_tool_system = IntegratedToolSystem()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
async def process_intent(intent_text: str, 
                        context: Dict[str, Any] = None,
                        user_id: str = None,
                        session_id: str = None,
                        graph_context: str = None) -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
    return await integrated_tool_system.process_intent(
        intent_text, context, user_id, session_id, graph_context
    )

async def get_available_tools() -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    return await integrated_tool_system.get_available_tools()

async def get_tool_statistics() -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return await integrated_tool_system.get_tool_statistics()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    async def test_integration():
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Integrated Tool System...")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n1. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        tools = await get_available_tools()
        print(f"   –ö–∞—Ç–∞–ª–æ–≥: {tools.get('total_catalog', 0)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"   –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä: {tools.get('total_connector', 0)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        print("\n2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è:")
        result = await process_intent(
            intent_text="–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            context={"text": "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"},
            user_id="test_user",
            session_id="test_session",
            graph_context="translation"
        )
        
        print(f"   –£—Å–ø–µ—Ö: {result.get('success')}")
        print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {result.get('tool_used')}")
        print(f"   –†–µ–π—Ç–∏–Ω–≥: {result.get('tool_rating')}")
        
        # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        stats = await get_tool_statistics()
        print(f"   –°—Ç–∞—Ç—É—Å: {stats.get('system_status')}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_integration()) 