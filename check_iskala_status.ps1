# ISKALA Status Check Script
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ISKALA

Write-Host "üå∫ ISKALA Status Check" -ForegroundColor Cyan
Write-Host "=====================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
Write-Host "üìã Docker Containers:" -ForegroundColor Yellow
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | Select-String "iskala|open-webui"

Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
Write-Host "üîå Port Status:" -ForegroundColor Yellow

$ports = @(
    @{Port=3000; Service="Open WebUI"; URL="http://localhost:3000"},
    @{Port=8001; Service="ISKALA Core"; URL="http://localhost:8001/health"},
    @{Port=8003; Service="OpenAPI Tool Server"; URL="http://localhost:8003"},
    @{Port=8081; Service="Vault"; URL="http://localhost:8081/health"},
    @{Port=8082; Service="Translation"; URL="http://localhost:8082/health"}
)

foreach ($port in $ports) {
    try {
        $response = Invoke-WebRequest -Uri $port.URL -TimeoutSec 5 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Host "   ‚úÖ $($port.Service) (Port $($port.Port))" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  $($port.Service) (Port $($port.Port)) - Status: $($response.StatusCode)" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "   ‚ùå $($port.Service) (Port $($port.Port)) - –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç" -ForegroundColor Red
    }
}

Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
Write-Host "üíæ Resource Usage:" -ForegroundColor Yellow
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"

Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —Ñ–∞–π–ª–æ–≤ Open WebUI
Write-Host "üîß Open WebUI JavaScript Files:" -ForegroundColor Yellow
try {
    $html = Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing
    $jsFiles = $html.Content | Select-String "_app/immutable.*\.js" -AllMatches | ForEach-Object { $_.Matches } | ForEach-Object { $_.Value }
    
    foreach ($file in $jsFiles | Select-Object -First 5) {
        try {
            $fileUrl = "http://localhost:3000$file"
            $fileResponse = Invoke-WebRequest -Uri $fileUrl -TimeoutSec 3 -UseBasicParsing
            if ($fileResponse.StatusCode -eq 200) {
                Write-Host "   ‚úÖ $file" -ForegroundColor Green
            } else {
                Write-Host "   ‚ùå $file - Status: $($fileResponse.StatusCode)" -ForegroundColor Red
            }
        } catch {
            Write-Host "   ‚ùå $file - –ù–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        }
    }
} catch {
    Write-Host "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å JavaScript —Ñ–∞–π–ª—ã" -ForegroundColor Red
}

Write-Host ""

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
Write-Host "üí° Recommendations:" -ForegroundColor Cyan
Write-Host "1. –ï—Å–ª–∏ Open WebUI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞" -ForegroundColor White
Write-Host "2. –û—Ç–∫—Ä–æ–π—Ç–µ iskala_clear_cache.html –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π" -ForegroundColor White
Write-Host "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" -ForegroundColor White
Write-Host "4. URL: http://localhost:3000" -ForegroundColor White

Write-Host ""
Write-Host "üå∫ ISKALA Status Check Complete" -ForegroundColor Cyan 