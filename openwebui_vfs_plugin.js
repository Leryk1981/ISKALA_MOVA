/**
 * –ü–ª–∞–≥–∏–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Open Web UI
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
 * 
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞: –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫—É plugins/ Open Web UI
 */

// –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –í–§–°
// –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ —ç—Ç–æ –±—É–¥–µ—Ç: import { IntegratedVFS } from './openwebui_integrated_vfs.js'

class VFSPlugin {
    constructor() {
        this.name = 'Virtual File System';
        this.version = '1.0.0';
        this.description = '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è Open Web UI';
        this.author = 'Open Web UI Community';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–§–°
        this.vfs = null;
        this.initialized = false;
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        this.commands = {
            '/vfs': this.handleVFSCommand.bind(this),
            '/project': this.handleProjectCommand.bind(this),
            '/file': this.handleFileCommand.bind(this),
            '/template': this.handleTemplateCommand.bind(this),
            '/export': this.handleExportCommand.bind(this),
            '/import': this.handleImportCommand.bind(this)
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
     */
    async initialize(openWebUI) {
        this.openWebUI = openWebUI;
        
        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –í–§–°
            const { IntegratedVFS } = await import('./openwebui_integrated_vfs.js');
            this.vfs = new IntegratedVFS();
            this.initialized = true;
            
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ Open Web UI
            for (const [command, handler] of Object.entries(this.commands)) {
                openWebUI.registerCommand(command, {
                    handler: handler,
                    description: this.getCommandDescription(command),
                    usage: this.getCommandUsage(command)
                });
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.addUIElements();
            
            console.log('‚úÖ VFS Plugin initialized successfully');
            return true;
            
        } catch (error) {
            console.error('‚ùå Failed to initialize VFS Plugin:', error);
            return false;
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vfs
     */
    async handleVFSCommand(args, context) {
        if (!this.initialized) {
            return this.errorResponse('VFS Plugin not initialized');
        }

        if (args.length === 0) {
            return this.helpResponse();
        }

        const subcommand = args[0].toLowerCase();

        switch (subcommand) {
            case 'stats':
                return await this.handleStats();
            
            case 'status':
                return await this.handleStatus();
            
            case 'help':
                return this.helpResponse();
            
            case 'save':
                return await this.handleSaveState();
            
            case 'load':
                return await this.handleLoadState();
            
            default:
                return this.errorResponse(`Unknown VFS command: ${subcommand}`);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–µ–∫—Ç–æ–≤ /project
     */
    async handleProjectCommand(args, context) {
        if (!this.initialized) {
            return this.errorResponse('VFS Plugin not initialized');
        }

        if (args.length === 0) {
            return await this.handleProjectList();
        }

        const action = args[0].toLowerCase();

        switch (action) {
            case 'create':
                return await this.handleProjectCreate(args.slice(1));
            
            case 'delete':
            case 'remove':
                return await this.handleProjectDelete(args.slice(1));
            
            case 'switch':
            case 'activate':
                return await this.handleProjectSwitch(args.slice(1));
            
            case 'list':
                return await this.handleProjectList();
            
            case 'info':
                return await this.handleProjectInfo(args.slice(1));
            
            default:
                return this.errorResponse(`Unknown project action: ${action}`);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ñ–∞–π–ª–æ–≤ /file
     */
    async handleFileCommand(args, context) {
        if (!this.initialized) {
            return this.errorResponse('VFS Plugin not initialized');
        }

        if (args.length === 0) {
            return this.errorResponse('File command requires arguments');
        }

        const action = args[0].toLowerCase();

        switch (action) {
            case 'create':
                return await this.handleFileCreate(args.slice(1), context);
            
            case 'read':
            case 'show':
                return await this.handleFileRead(args.slice(1));
            
            case 'update':
            case 'edit':
                return await this.handleFileUpdate(args.slice(1), context);
            
            case 'delete':
            case 'remove':
                return await this.handleFileDelete(args.slice(1));
            
            case 'list':
                return await this.handleFileList(args.slice(1));
            
            default:
                return this.errorResponse(`Unknown file action: ${action}`);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —à–∞–±–ª–æ–Ω–æ–≤ /template
     */
    async handleTemplateCommand(args, context) {
        if (args.length === 0) {
            return this.listTemplatesResponse();
        }

        const action = args[0].toLowerCase();

        switch (action) {
            case 'list':
                return this.listTemplatesResponse();
            
            case 'info':
                return this.templateInfoResponse(args[1]);
            
            default:
                return this.errorResponse(`Unknown template action: ${action}`);
        }
    }

    // =============================================================================
    // –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ê–ù–î –ü–†–û–ï–ö–¢–û–í
    // =============================================================================

    async handleProjectCreate(args) {
        if (args.length === 0) {
            return this.errorResponse('Project name is required');
        }

        const projectName = args[0];
        const template = args[1] || 'default';

        try {
            const result = await this.vfs.createProject(projectName, template);
            
            return {
                type: 'success',
                title: '‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω',
                content: `**–ü—Ä–æ–µ–∫—Ç:** ${result.project}\n**–®–∞–±–ª–æ–Ω:** ${result.template}\n**–§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** ${result.filesCreated}`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to create project: ${error.message}`);
        }
    }

    async handleProjectDelete(args) {
        if (args.length === 0) {
            return this.errorResponse('Project name is required');
        }

        const projectName = args[0];

        try {
            const result = await this.vfs.deleteProject(projectName);
            
            return {
                type: 'success',
                title: 'üóëÔ∏è –ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω',
                content: result.message,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to delete project: ${error.message}`);
        }
    }

    async handleProjectSwitch(args) {
        if (args.length === 0) {
            return this.errorResponse('Project name is required');
        }

        const projectName = args[0];

        try {
            const result = await this.vfs.switchProject(projectName);
            
            return {
                type: 'success',
                title: 'üîÑ –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                content: `–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç: **${result.activeProject}**`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to switch project: ${error.message}`);
        }
    }

    async handleProjectList() {
        try {
            const result = await this.vfs.listProjects();
            
            let content = '## üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n';
            
            if (result.projects.length === 0) {
                content += '*–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π `/project create <–Ω–∞–∑–≤–∞–Ω–∏–µ>`*';
            } else {
                result.projects.forEach(project => {
                    const status = project.isActive ? 'üü¢' : '‚ö™';
                    const filesInfo = project.filesCount ? ` (${project.filesCount} —Ñ–∞–π–ª–æ–≤)` : '';
                    content += `${status} **${project.name}** - ${project.type}${filesInfo}\n`;
                });
                
                content += `\n**–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:** ${result.totalCount}`;
                if (result.activeProject) {
                    content += `\n**–ê–∫—Ç–∏–≤–Ω—ã–π:** ${result.activeProject}`;
                }
            }

            return {
                type: 'info',
                title: 'üìÇ –ü—Ä–æ–µ–∫—Ç—ã',
                content: content,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to list projects: ${error.message}`);
        }
    }

    async handleProjectInfo(args) {
        const projectName = args[0] || null;

        try {
            const result = await this.vfs.getProjectInfo(projectName);
            const project = result.project;
            
            let content = `## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n\n`;
            content += `**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${project.name}\n`;
            content += `**–¢–∏–ø:** ${project.type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
            content += `**–°–æ–∑–¥–∞–Ω:** ${new Date(project.created).toLocaleString()}\n`;
            content += `**–ò–∑–º–µ–Ω–µ–Ω:** ${new Date(project.modified).toLocaleString()}\n`;
            content += `**–§–∞–π–ª–æ–≤:** ${project.filesCount}\n`;
            content += `**–†–∞–∑–º–µ—Ä:** ${project.size} –±–∞–π—Ç\n`;
            content += `**–°—Ç–∞—Ç—É—Å:** ${project.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' : '‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}\n`;
            
            if (project.template) {
                content += `**–®–∞–±–ª–æ–Ω:** ${project.template}\n`;
            }

            return {
                type: 'info',
                title: `üìÇ ${project.name}`,
                content: content,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to get project info: ${error.message}`);
        }
    }

    // =============================================================================
    // –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ê–ù–î –§–ê–ô–õ–û–í
    // =============================================================================

    async handleFileCreate(args, context) {
        if (args.length < 2) {
            return this.errorResponse('Usage: /file create <project> <filepath> [content]');
        }

        const [projectName, filePath] = args;
        const content = args.slice(2).join(' ') || '';

        try {
            const result = await this.vfs.createFile(projectName, filePath, content);
            
            return {
                type: 'success',
                title: 'üìÑ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω',
                content: `**–ü—Ä–æ–µ–∫—Ç:** ${projectName}\n**–ü—É—Ç—å:** ${result.path}\n**–†–∞–∑–º–µ—Ä:** ${result.size} –±–∞–π—Ç`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to create file: ${error.message}`);
        }
    }

    async handleFileRead(args) {
        if (args.length < 2) {
            return this.errorResponse('Usage: /file read <project> <filepath>');
        }

        const [projectName, filePath] = args;

        try {
            const result = await this.vfs.readFile(projectName, filePath);
            
            let content = `## üìñ ${result.path}\n\n`;
            content += `**–†–∞–∑–º–µ—Ä:** ${result.size} –±–∞–π—Ç  \n`;
            content += `**–°—Ç—Ä–æ–∫:** ${result.lines}\n\n`;
            content += '```\n' + result.content + '\n```';

            return {
                type: 'info',
                title: `üìÑ ${filePath}`,
                content: content,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to read file: ${error.message}`);
        }
    }

    async handleFileUpdate(args, context) {
        if (args.length < 3) {
            return this.errorResponse('Usage: /file update <project> <filepath> <content>');
        }

        const [projectName, filePath] = args;
        const content = args.slice(2).join(' ');

        try {
            const result = await this.vfs.updateFile(projectName, filePath, content);
            
            return {
                type: 'success',
                title: '‚úèÔ∏è –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω',
                content: `**–ü—Ä–æ–µ–∫—Ç:** ${projectName}\n**–ü—É—Ç—å:** ${result.path}\n**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:** ${result.sizeDiff > 0 ? '+' : ''}${result.sizeDiff} –±–∞–π—Ç`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to update file: ${error.message}`);
        }
    }

    async handleFileDelete(args) {
        if (args.length < 2) {
            return this.errorResponse('Usage: /file delete <project> <filepath>');
        }

        const [projectName, filePath] = args;

        try {
            const result = await this.vfs.deleteFile(projectName, filePath);
            
            return {
                type: 'success',
                title: 'üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω',
                content: `**–ü—Ä–æ–µ–∫—Ç:** ${projectName}\n**–ü—É—Ç—å:** ${result.path}`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to delete file: ${error.message}`);
        }
    }

    async handleFileList(args) {
        if (args.length === 0) {
            return this.errorResponse('Usage: /file list <project>');
        }

        const projectName = args[0];

        try {
            const result = await this.vfs.listFiles(projectName);
            
            let content = `## üìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ ${projectName}\n\n`;
            
            if (result.files.length === 0) {
                content += '*–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*';
            } else {
                result.files.forEach(file => {
                    const ext = file.extension ? `(${file.extension})` : '';
                    content += `üìÑ **${file.path}** ${ext} - ${file.size} –±–∞–π—Ç, ${file.lines} —Å—Ç—Ä–æ–∫\n`;
                });
                
                content += `\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
                content += `- –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${result.stats.totalFiles}\n`;
                content += `- –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${result.stats.totalSize} –±–∞–π—Ç\n`;
                
                if (Object.keys(result.stats.extensions).length > 0) {
                    content += `- –†–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${Object.entries(result.stats.extensions)
                        .map(([ext, count]) => `${ext || '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'}(${count})`)
                        .join(', ')}\n`;
                }
            }

            return {
                type: 'info',
                title: `üìÇ ${projectName}`,
                content: content,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to list files: ${error.message}`);
        }
    }

    // =============================================================================
    // –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´
    // =============================================================================

    async handleStats() {
        try {
            const result = await this.vfs.getSystemStats();
            const stats = result.stats;
            
            let content = `## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–§–°\n\n`;
            content += `**–ü—Ä–æ–µ–∫—Ç–æ–≤:** ${stats.projectsCount}\n`;
            content += `**–§–∞–π–ª–æ–≤:** ${stats.totalFiles}\n`;
            content += `**–†–∞–∑–º–µ—Ä:** ${this.formatBytes(stats.totalSize)}\n`;
            content += `**–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:** ${stats.activeProject || '–Ω–µ—Ç'}\n`;
            content += `**–¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:** ${stats.storageType}\n`;
            content += `**–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:** ${stats.availableTemplates.join(', ')}\n`;

            if (result.projects.length > 0) {
                content += `\n**–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:**\n`;
                result.projects.forEach(project => {
                    const status = project.name === stats.activeProject ? 'üü¢' : '‚ö™';
                    content += `${status} ${project.name} - ${project.filesCount || 0} —Ñ–∞–π–ª–æ–≤\n`;
                });
            }

            return {
                type: 'info',
                title: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                content: content,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to get stats: ${error.message}`);
        }
    }

    async handleStatus() {
        const status = {
            initialized: this.initialized,
            version: this.version,
            activeProject: this.vfs ? (await this.vfs.getSystemStats()).stats.activeProject : null
        };

        let content = `## üîß –°—Ç–∞—Ç—É—Å –í–§–°\n\n`;
        content += `**–ü–ª–∞–≥–∏–Ω:** ${this.initialized ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
        content += `**–í–µ—Ä—Å–∏—è:** ${this.version}\n`;
        content += `**–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:** ${status.activeProject || '–Ω–µ—Ç'}\n`;

        return {
            type: 'info',
            title: 'üîß –°—Ç–∞—Ç—É—Å',
            content: content,
            data: status
        };
    }

    async handleSaveState() {
        try {
            const result = await this.vfs.saveSystemState();
            
            return {
                type: 'success',
                title: 'üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
                content: `${result.message}\n**–ü—Ä–æ–µ–∫—Ç–æ–≤:** ${result.projectsCount}\n**–†–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è:** ${this.formatBytes(result.stateSize)}`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to save state: ${error.message}`);
        }
    }

    async handleLoadState() {
        try {
            const result = await this.vfs.loadSystemState();
            
            return {
                type: 'success',
                title: 'üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                content: `${result.message}\n**–ü—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** ${result.projectsLoaded}\n**–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:** ${result.activeProject || '–Ω–µ—Ç'}`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to load state: ${error.message}`);
        }
    }

    // =============================================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –≠–ö–°–ü–û–†–¢–ê/–ò–ú–ü–û–†–¢–ê
    // =============================================================================

    async handleExportCommand(args, context) {
        if (args.length === 0) {
            return this.errorResponse('Usage: /export <project> [format]');
        }

        const projectName = args[0];
        const format = args[1] || 'json';

        try {
            const result = await this.vfs.exportProject(projectName, format);
            
            let content = `## üì¶ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${projectName}\n\n`;
            content += `**–§–æ—Ä–º–∞—Ç:** ${result.format}\n`;
            
            if (result.format === 'json') {
                content += `**–†–∞–∑–º–µ—Ä:** ${this.formatBytes(result.data.length)}\n\n`;
                content += '```json\n' + result.data.substring(0, 500) + '...\n```\n\n';
                content += '*–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ data –æ–±—ä–µ–∫—Ç–µ –æ—Ç–≤–µ—Ç–∞*';
            }

            return {
                type: 'success',
                title: 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç',
                content: content,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to export project: ${error.message}`);
        }
    }

    async handleImportCommand(args, context) {
        if (args.length === 0) {
            return this.errorResponse('Usage: /import <json_data> [format]');
        }

        const jsonData = args.join(' ');
        const format = 'json';

        try {
            const result = await this.vfs.importProject(jsonData, format);
            
            return {
                type: 'success',
                title: 'üì• –ò–º–ø–æ—Ä—Ç',
                content: `${result.message}\n**–§–∞–π–ª–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:** ${result.filesImported}`,
                data: result
            };
        } catch (error) {
            return this.errorResponse(`Failed to import project: ${error.message}`);
        }
    }

    // =============================================================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // =============================================================================

    listTemplatesResponse() {
        const templates = this.vfs ? Object.keys(this.vfs.templates) : [];
        
        let content = `## üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n`;
        
        if (this.vfs) {
            Object.entries(this.vfs.templates).forEach(([key, template]) => {
                content += `**${key}** - ${template.description}\n`;
                content += `  *–¢–∏–ø:* ${template.type}, *–§–∞–π–ª–æ–≤:* ${Object.keys(template.files).length}\n\n`;
            });
        } else {
            content += '*–í–§–° –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞*';
        }

        return {
            type: 'info',
            title: 'üé® –®–∞–±–ª–æ–Ω—ã',
            content: content
        };
    }

    templateInfoResponse(templateName) {
        if (!this.vfs || !templateName) {
            return this.errorResponse('Template name is required');
        }

        const template = this.vfs.templates[templateName];
        if (!template) {
            return this.errorResponse(`Template '${templateName}' not found`);
        }

        let content = `## üé® –®–∞–±–ª–æ–Ω: ${templateName}\n\n`;
        content += `**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${template.name}\n`;
        content += `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${template.description}\n`;
        content += `**–¢–∏–ø:** ${template.type}\n`;
        content += `**–§–∞–π–ª–æ–≤:** ${Object.keys(template.files).length}\n\n`;
        
        content += `**–§–∞–π–ª—ã –≤ —à–∞–±–ª–æ–Ω–µ:**\n`;
        Object.keys(template.files).forEach(filePath => {
            content += `- ${filePath}\n`;
        });

        return {
            type: 'info',
            title: `üé® ${templateName}`,
            content: content,
            data: template
        };
    }

    helpResponse() {
        const content = `## üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –í–§–°

### –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:
- \`/project create <name> [template]\` - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
- \`/project list\` - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤  
- \`/project switch <name>\` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç
- \`/project info [name]\` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
- \`/project delete <name>\` - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç

### –ö–æ–º–∞–Ω–¥—ã —Ñ–∞–π–ª–æ–≤:
- \`/file create <project> <path> [content]\` - —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
- \`/file read <project> <path>\` - –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
- \`/file update <project> <path> <content>\` - –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª
- \`/file delete <project> <path>\` - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
- \`/file list <project>\` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

### –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- \`/vfs stats\` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
- \`/vfs status\` - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–∞
- \`/vfs save\` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- \`/vfs load\` - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ

### –®–∞–±–ª–æ–Ω—ã:
- \`/template list\` - —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
- \`/template info <name>\` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ

### –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç:
- \`/export <project> [format]\` - —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞
- \`/import <json_data>\` - –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞`;

        return {
            type: 'info',
            title: 'üÜò –°–ø—Ä–∞–≤–∫–∞',
            content: content
        };
    }

    errorResponse(message) {
        return {
            type: 'error',
            title: '‚ùå –û—à–∏–±–∫–∞',
            content: message
        };
    }

    formatBytes(bytes) {
        if (bytes === 0) return '0 –±–∞–π—Ç';
        const k = 1024;
        const sizes = ['–±–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    getCommandDescription(command) {
        const descriptions = {
            '/vfs': '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
            '/project': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
            '/file': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏',
            '/template': '–†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤',
            '/export': '–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤',
            '/import': '–ò–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤'
        };
        return descriptions[command] || '–í–§–° –∫–æ–º–∞–Ω–¥–∞';
    }

    getCommandUsage(command) {
        const usages = {
            '/vfs': '/vfs [stats|status|help|save|load]',
            '/project': '/project [create|list|switch|info|delete] [args...]',
            '/file': '/file [create|read|update|delete|list] [args...]',
            '/template': '/template [list|info] [name]',
            '/export': '/export <project> [format]',
            '/import': '/import <json_data>'
        };
        return usages[command] || command + ' [args...]';
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Open Web UI
     */
    addUIElements() {
        // –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API Open Web UI
        // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ–¥:
        
        /*
        this.openWebUI.addSidebarButton({
            id: 'vfs-projects',
            icon: 'üìÇ',
            title: '–ü—Ä–æ–µ–∫—Ç—ã –í–§–°',
            onClick: () => this.showProjectManager()
        });

        this.openWebUI.addQuickAction({
            id: 'vfs-new-project',
            label: '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
            command: '/project create'
        });
        */
    }
}

// =============================================================================
// –≠–ö–°–ü–û–†–¢ –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–õ–ê–ì–ò–ù–ê
// =============================================================================

// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Open Web UI
if (typeof window !== 'undefined') {
    window.VFSPlugin = VFSPlugin;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ Open Web UI
    if (typeof openWebUI !== 'undefined') {
        const vfsPlugin = new VFSPlugin();
        openWebUI.registerPlugin(vfsPlugin);
    }
}

// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = VFSPlugin;
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default VFSPlugin; 