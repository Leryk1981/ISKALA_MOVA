#!/usr/bin/env python3
"""
Health Check –¥–ª—è ISKALA MOVA Neo4j Infrastructure
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Neo4j, Redis —Ç–∞ –±–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
"""

import asyncio
import sys
import json
from pathlib import Path
from typing import Dict, Any

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from services.neo4j_driver import get_neo4j_connection, Neo4jConnection
from services.graph_models import CypherTemplates, Intent, Phase, ContextChunk

async def test_basic_connectivity() -> Dict[str, Any]:
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Neo4j"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Neo4j...")
    
    try:
        conn = await get_neo4j_connection()
        health_status = await conn.health_check()
        
        if health_status["neo4j"]:
            print("‚úÖ Neo4j –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
        else:
            print("‚ùå Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            
        if health_status["redis"]:
            print("‚úÖ Redis –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
        else:
            print("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
            
        return health_status
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return {"error": str(e)}

async def test_basic_query() -> bool:
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç...")
    
    try:
        conn = await get_neo4j_connection()
        result = await conn.execute_query("RETURN 'Graph ready' as status")
        
        if result and len(result) > 0:
            status = result[0].get("status")
            print(f"‚úÖ –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π: {status}")
            return True
        else:
            print("‚ùå –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä–Ω—É–≤ –ø—É—Å—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: {e}")
        return False

async def test_create_indexes() -> bool:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ —Ç–∞ constraints"""
    print("üîç –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ —Ç–∞ constraints...")
    
    try:
        conn = await get_neo4j_connection()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
        for index_query in CypherTemplates.CREATE_INDEXES:
            try:
                await conn.execute_query(index_query)
                print(f"‚úÖ –Ü–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –º–æ–∂–ª–∏–≤–æ –≤–∂–µ —ñ—Å–Ω—É—î: {e}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ constraints
        for constraint_query in CypherTemplates.CREATE_CONSTRAINTS:
            try:
                await conn.execute_query(constraint_query)
                print(f"‚úÖ Constraint —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è Constraint –º–æ–∂–ª–∏–≤–æ –≤–∂–µ —ñ—Å–Ω—É—î: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤: {e}")
        return False

async def test_crud_operations() -> bool:
    """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó...")
    
    try:
        conn = await get_neo4j_connection()
        
        # CREATE: –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π Intent
        test_intent = Intent(
            name="test_health_check",
            description="–¢–µ—Å—Ç–æ–≤–∏–π –Ω–∞–º—ñ—Ä –¥–ª—è health check",
            confidence=0.9,
            lang="uk",
            category="system_test"
        )
        
        create_result = await conn.execute_query(
            """
            MERGE (i:Intent {name: $name, lang: $lang})
            ON CREATE SET i += $props, i.created_at = datetime()
            ON MATCH SET i.updated_at = datetime()
            RETURN i.id as id, i.name as name
            """,
            test_intent.to_cypher_params()
        )
        
        if create_result:
            intent_id = create_result[0]["id"]
            print(f"‚úÖ CREATE: Intent —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID {intent_id}")
        else:
            print("‚ùå CREATE: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ Intent")
            return False
        
        # READ: –ß–∏—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π Intent
        read_result = await conn.execute_query(
            "MATCH (i:Intent {name: $name}) RETURN i.id as id, i.confidence as confidence",
            {"name": "test_health_check"}
        )
        
        if read_result:
            confidence = read_result[0]["confidence"]
            print(f"‚úÖ READ: Intent –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, confidence = {confidence}")
        else:
            print("‚ùå READ: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ Intent")
            return False
        
        # UPDATE: –û–Ω–æ–≤–ª—é—î–º–æ Intent
        await conn.execute_query(
            """
            MATCH (i:Intent {name: $name})
            SET i.confidence = $new_confidence, i.updated_at = datetime()
            RETURN i.confidence as confidence
            """,
            {"name": "test_health_check", "new_confidence": 0.95}
        )
        print("‚úÖ UPDATE: Intent –æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        # DELETE: –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π Intent
        await conn.execute_query(
            "MATCH (i:Intent {name: $name}) DELETE i",
            {"name": "test_health_check"}
        )
        print("‚úÖ DELETE: –¢–µ—Å—Ç–æ–≤–∏–π Intent –≤–∏–¥–∞–ª–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π: {e}")
        return False

async def test_performance() -> Dict[str, Any]:
    """–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å...")
    
    import time
    
    try:
        conn = await get_neo4j_connection()
        
        # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø–∏—Ç—É
        start_time = time.time()
        await conn.execute_query("RETURN 1 as test")
        simple_query_time = time.time() - start_time
        
        # –¢–µ—Å—Ç –∫–µ—à—É–≤–∞–Ω–Ω—è
        cache_key = "test_cache"
        start_time = time.time()
        await conn.execute_query(
            "RETURN 'cached_result' as result", 
            cache_key=cache_key
        )
        first_query_time = time.time() - start_time
        
        start_time = time.time()
        await conn.execute_query(
            "RETURN 'cached_result' as result", 
            cache_key=cache_key
        )
        cached_query_time = time.time() - start_time
        
        perf_results = {
            "simple_query_ms": round(simple_query_time * 1000, 2),
            "first_query_ms": round(first_query_time * 1000, 2),
            "cached_query_ms": round(cached_query_time * 1000, 2),
            "cache_speedup": round(first_query_time / cached_query_time, 2) if cached_query_time > 0 else "N/A"
        }
        
        print(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:")
        print(f"   - –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç: {perf_results['simple_query_ms']} –º—Å")
        print(f"   - –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç: {perf_results['first_query_ms']} –º—Å")
        print(f"   - –ö–µ—à–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç: {perf_results['cached_query_ms']} –º—Å")
        print(f"   - –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∫–µ—à—É: {perf_results['cache_speedup']}x")
        
        return perf_results
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
        return {"error": str(e)}

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è health check"""
    print("üöÄ ISKALA MOVA Neo4j Infrastructure Health Check")
    print("=" * 50)
    
    results = {
        "timestamp": asyncio.get_event_loop().time(),
        "tests": {}
    }
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    connectivity_result = await test_basic_connectivity()
    results["tests"]["connectivity"] = connectivity_result
    
    # –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç
    basic_query_result = await test_basic_query()
    results["tests"]["basic_query"] = basic_query_result
    
    # –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤
    if basic_query_result:
        indexes_result = await test_create_indexes()
        results["tests"]["indexes"] = indexes_result
    
    # –¢–µ—Å—Ç 4: CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó
    if basic_query_result:
        crud_result = await test_crud_operations()
        results["tests"]["crud"] = crud_result
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    if basic_query_result:
        perf_result = await test_performance()
        results["tests"]["performance"] = perf_result
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìä –ü–Ü–î–°–£–ú–û–ö HEALTH CHECK:")
    
    all_passed = True
    for test_name, test_result in results["tests"].items():
        if test_name == "performance":
            status = "‚úÖ PASSED" if "error" not in test_result else "‚ùå FAILED"
        else:
            status = "‚úÖ PASSED" if test_result else "‚ùå FAILED"
        
        print(f"   {test_name.upper()}: {status}")
        if not test_result:
            all_passed = False
    
    if all_passed:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! Neo4j infrastructure –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
        exit_code = 0
    else:
        print("\n‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")
        exit_code = 1
    
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    try:
        from services.neo4j_driver import close_neo4j_connection
        await close_neo4j_connection()
        print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")
    except:
        pass
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    with open("health_check_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ health_check_results.json")
    
    return exit_code

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Health check –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1) 