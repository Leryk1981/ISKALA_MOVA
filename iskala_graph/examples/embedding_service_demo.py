#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è EmbeddingService –¥–ª—è ISKALA MOVA
============================================

–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è embedding service –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏,
–∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç–∞ batch processing.
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

from services.embedding_service import EmbeddingService, EmbeddingConfig

async def demo_basic_embedding():
    """–î–µ–º–æ –±–∞–∑–æ–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è embedding service"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è ISKALA MOVA Embedding Service")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
    config = EmbeddingConfig(
        model_name="all-MiniLM-L6-v2",
        device="auto",  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é
        normalize_embeddings=True,
        cache_ttl=1800,  # 30 —Ö–≤–∏–ª–∏–Ω
        batch_size=16
    )
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
    service = EmbeddingService(config)
    await service.initialize()
    
    try:
        # –î–µ–º–æ 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ embedding
        print("\nüìä –î–µ–º–æ 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è embedding –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É")
        text = "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ Python - —Ü–µ —Ü—ñ–∫–∞–≤–æ —ñ –∫–æ—Ä–∏—Å–Ω–æ"
        
        start_time = time.time()
        embedding = await service.get_embedding(text)
        duration = time.time() - start_time
        
        print(f"–¢–µ–∫—Å—Ç: {text}")
        print(f"–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å embedding: {len(embedding)}")
        print(f"–ü–µ—Ä—à—ñ 5 –∑–Ω–∞—á–µ–Ω—å: {embedding[:5]}")
        print(f"–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {duration*1000:.2f}ms")
        
        # –î–µ–º–æ 2: –ö–µ—à—É–≤–∞–Ω–Ω—è
        print("\nüíæ –î–µ–º–æ 2: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è")
        print("–ü–µ—Ä—à–∏–π –≤–∏–∫–ª–∏–∫ (cache miss):")
        start_time = time.time()
        embedding1 = await service.get_embedding(text)
        miss_time = time.time() - start_time
        print(f"–ß–∞—Å: {miss_time*1000:.2f}ms")
        
        print("–î—Ä—É–≥–∏–π –≤–∏–∫–ª–∏–∫ (cache hit):")
        start_time = time.time()
        embedding2 = await service.get_embedding(text)
        hit_time = time.time() - start_time
        print(f"–ß–∞—Å: {hit_time*1000:.2f}ms")
        
        print(f"–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∫–µ—à—É: {miss_time/hit_time:.1f}x")
        print(f"Embeddings —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ: {embedding1 == embedding2}")
        
        # –î–µ–º–æ 3: Batch processing
        print("\nüì¶ –î–µ–º–æ 3: Batch processing")
        ukrainian_texts = [
            "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –∑–º—ñ–Ω—é—î —Å–≤—ñ—Ç",
            "–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑–≤'—è–∑—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–¥–∞—á—ñ",
            "–£–∫—Ä–∞—ó–Ω–∞ –º–∞—î –≤–µ–ª–∏–∫–∏–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª —É —Å—Ñ–µ—Ä—ñ IT",
            "–ö–∏—ó–≤ - —Ü–µ–Ω—Ç—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏—Ö —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π",
            "Python - –ø–æ–ø—É–ª—è—Ä–Ω–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"
        ]
        
        start_time = time.time()
        embeddings = await service.get_embeddings_batch(ukrainian_texts)
        batch_time = time.time() - start_time
        
        print(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {len(ukrainian_texts)} —Ç–µ–∫—Å—Ç—ñ–≤")
        print(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {batch_time*1000:.2f}ms")
        print(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ —Ç–µ–∫—Å—Ç: {batch_time*1000/len(ukrainian_texts):.2f}ms")
        
        # –î–µ–º–æ 4: –ü–æ—à—É–∫ —Å—Ö–æ–∂–æ—Å—Ç—ñ
        print("\nüîç –î–µ–º–æ 4: –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤")
        query = "–†–æ–∑—Ä–æ–±–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è"
        
        similar_results = await service.find_most_similar(
            query, ukrainian_texts, top_k=3
        )
        
        print(f"–ó–∞–ø–∏—Ç: {query}")
        print("–ù–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂—ñ —Ç–µ–∫—Å—Ç–∏:")
        for i, result in enumerate(similar_results, 1):
            print(f"{i}. {result['text']}")
            print(f"   Similarity: {result['similarity']:.4f}")
        
        # –î–µ–º–æ 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìà –î–µ–º–æ 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤—ñ—Å—É")
        stats = await service.get_stats()
        
        print(f"–ú–æ–¥–µ–ª—å: {stats['model_info']['name']}")
        print(f"–ü—Ä–∏—Å—Ç—Ä—ñ–π: {stats['model_info']['device']}")
        print(f"–ó–∞–≥–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: {stats['performance']['total_requests']}")
        print(f"–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–ø–∞–¥–∞–Ω—å —É –∫–µ—à: {stats['performance']['cache_hit_rate']}")
        print(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {stats['performance']['avg_processing_time_ms']}ms")
        
        # –î–µ–º–æ 6: Health check
        print("\nü©∫ –î–µ–º–æ 6: Health check")
        health = await service.health_check()
        print(f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—É: {health['status']}")
        print(f"–ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {health['model_loaded']}")
        print(f"Redis –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: {health['redis_connected']}")
        
    finally:
        await service.close()
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def demo_similarity_search():
    """–î–µ–º–æ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é"""
    print("\nüá∫üá¶ –î–µ–º–æ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é")
    print("=" * 50)
    
    service = EmbeddingService()
    await service.initialize()
    
    try:
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        knowledge_base = [
            "–ö–∏—ó–≤ - —Å—Ç–æ–ª–∏—Ü—è –£–∫—Ä–∞—ó–Ω–∏, —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –Ω–∞ —Ä—ñ—á—Ü—ñ –î–Ω—ñ–ø—Ä–æ",
            "–õ—å–≤—ñ–≤ - –∫—É–ª—å—Ç—É—Ä–Ω–∞ —Å—Ç–æ–ª–∏—Ü—è –£–∫—Ä–∞—ó–Ω–∏ –∑ –±–∞–≥–∞—Ç–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é",
            "–û–¥–µ—Å–∞ - –ø–æ—Ä—Ç–æ–≤–µ –º—ñ—Å—Ç–æ –Ω–∞ –±–µ—Ä–µ–∑—ñ –ß–æ—Ä–Ω–æ–≥–æ –º–æ—Ä—è",
            "–•–∞—Ä–∫—ñ–≤ - –≤–∞–∂–ª–∏–≤–∏–π –æ—Å–≤—ñ—Ç–Ω—ñ–π —Ç–∞ –ø—Ä–æ–º–∏—Å–ª–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä",
            "–î–Ω—ñ–ø—Ä–æ - –º—ñ—Å—Ç–æ –º–µ—Ç–∞–ª—É—Ä–≥—ñ—ó —Ç–∞ –≤–∞–∂–∫–æ—ó –ø—Ä–æ–º–∏—Å–ª–æ–≤–æ—Å—Ç—ñ",
            "Python - –æ–±'—î–∫—Ç–Ω–æ-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
            "JavaScript –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∏",
            "–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö —ñ –¥–∞–Ω–∏—Ö",
            "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç —ñ–º—ñ—Ç—É—î –ª—é–¥—Å—å–∫–µ –º–∏—Å–ª–µ–Ω–Ω—è"
        ]
        
        # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
        queries = [
            "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å—Ç–æ–ª–∏—Ü—é –£–∫—Ä–∞—ó–Ω–∏",
            "–Ø–∫–µ –º—ñ—Å—Ç–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –î–Ω—ñ–ø—Ä—ñ?",
            "–©–æ —Ç–∞–∫–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è?",
            "–Ø–∫ –ø—Ä–∞—Ü—é—î –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è?"
        ]
        
        for query in queries:
            print(f"\nüîç –ó–∞–ø–∏—Ç: {query}")
            results = await service.find_most_similar(
                query, knowledge_base, top_k=2
            )
            
            for i, result in enumerate(results, 1):
                print(f"  {i}. {result['text'][:60]}...")
                print(f"     Similarity: {result['similarity']:.4f}")
    
    finally:
        await service.close()

async def demo_performance_comparison():
    """–î–µ–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    print("\n‚ö° –î–µ–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    print("=" * 40)
    
    service = EmbeddingService()
    await service.initialize()
    
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        test_texts = [
            f"–¢–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä {i} –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ embedding service"
            for i in range(50)
        ]
        
        # –¢–µ—Å—Ç 1: –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞
        print("üìä –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞:")
        start_time = time.time()
        for text in test_texts:
            await service.get_embedding(text)
        sequential_time = time.time() - start_time
        print(f"–ß–∞—Å: {sequential_time:.2f}s")
        
        # –û—á–∏—â—É—î–º–æ –∫–µ—à –¥–ª—è —á–µ—Å–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        await service.clear_cache()
        
        # –¢–µ—Å—Ç 2: Batch –æ–±—Ä–æ–±–∫–∞
        print("üì¶ Batch –æ–±—Ä–æ–±–∫–∞:")
        start_time = time.time()
        await service.get_embeddings_batch(test_texts)
        batch_time = time.time() - start_time
        print(f"–ß–∞—Å: {batch_time:.2f}s")
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        speedup = sequential_time / batch_time
        print(f"\nüöÄ –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è batch processing: {speedup:.1f}x")
        
        # –¢–µ—Å—Ç –∫–µ—à—É
        print("\nüíæ –¢–µ—Å—Ç –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–µ—à—É:")
        cached_start = time.time()
        await service.get_embeddings_batch(test_texts)  # –í—Å—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –≤ –∫–µ—à—ñ
        cached_time = time.time() - cached_start
        
        cache_speedup = batch_time / cached_time
        print(f"–ß–∞—Å –∑ –∫–µ—à—É: {cached_time:.2f}s")
        print(f"–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∫–µ—à—É: {cache_speedup:.1f}x")
        
    finally:
        await service.close()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    try:
        await demo_basic_embedding()
        await demo_similarity_search()
        await demo_performance_comparison()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    asyncio.run(main()) 