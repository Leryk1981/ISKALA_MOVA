from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
import json
import os
from datetime import datetime
import logging

app = Flask(__name__)
CORS(app)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ —Ñ–∞–π–ª–∞–º–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—á"""
    return send_from_directory(BASE_DIR, 'layered_viewer.html')

@app.route('/<path:filename>')
def serve_static(filename):
    """–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    return send_from_directory(BASE_DIR, filename)

@app.route('/api/capsule/latest', methods=['GET'])
def get_latest_capsule():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∫–∞–ø—Å—É–ª—É"""
    try:
        capsule_path = os.path.join(BASE_DIR, 'example_capsule.json')
        with open(capsule_path, 'r', encoding='utf-8') as f:
            capsule = json.load(f)
        
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—é –∫–∞–ø—Å—É–ª—É")
        return jsonify(capsule)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–∞–ø—Å—É–ª–∏: {e}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

def validate_capsule_data(data):
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–∞–ø—Å—É–ª–∏"""
    if not isinstance(data, dict):
        return False, "–î–∞–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –æ–±'—î–∫—Ç–æ–º"
    
    required_layers = ['mova', 'jalm', 'code', 'log', 'error']
    for layer in required_layers:
        if layer not in data:
            return False, f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π —à–∞—Ä: {layer}"
        
        layer_data = data[layer]
        if not isinstance(layer_data, dict):
            return False, f"–î–∞–Ω—ñ —à–∞—Ä—É {layer} –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –æ–±'—î–∫—Ç–æ–º"
        
        if 'short' not in layer_data or 'full' not in layer_data:
            return False, f"–®–∞—Ä {layer} –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ–ª—è 'short' —Ç–∞ 'full'"
        
        if not isinstance(layer_data['short'], str) or not isinstance(layer_data['full'], str):
            return False, f"–ü–æ–ª—è 'short' —Ç–∞ 'full' —à–∞—Ä—É {layer} –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä—è–¥–∫–∞–º–∏"
    
    return True, "OK"

@app.route('/api/capsule', methods=['POST'])
def save_capsule():
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤—É –∫–∞–ø—Å—É–ª—É"""
    try:
        capsule_data = request.get_json()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        is_valid, message = validate_capsule_data(capsule_data)
        if not is_valid:
            return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {message}"}), 400
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"capsule_{timestamp}.json"
        filepath = os.path.join(BASE_DIR, filename)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(capsule_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∫–∞–ø—Å—É–ª—É: {filename}")
        return jsonify({
            "success": True,
            "filename": filename,
            "message": "–ö–∞–ø—Å—É–ª–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ"
        })
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞–ø—Å—É–ª–∏: {e}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"}), 500

@app.route('/api/capsules', methods=['GET'])
def get_capsules_list():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–∞–ø—Å—É–ª"""
    try:
        capsules = []
        
        # –®—É–∫–∞—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∫–∞–ø—Å—É–ª
        for filename in os.listdir(BASE_DIR):
            if filename.startswith('capsule_') and filename.endswith('.json'):
                filepath = os.path.join(BASE_DIR, filename)
                
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        capsule = json.load(f)
                    
                    capsules.append({
                        "filename": filename,
                        "timestamp": filename.replace('capsule_', '').replace('.json', ''),
                        "preview": {
                            "mova": capsule.get('mova', {}).get('short', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö MOVA'),
                            "jalm": capsule.get('jalm', {}).get('short', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö JALM')
                        }
                    })
                except Exception as e:
                    logger.warning(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É {filename}: {e}")
                    continue
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ timestamp (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        capsules.sort(key=lambda x: x['timestamp'], reverse=True)
        
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –∫–∞–ø—Å—É–ª: {len(capsules)} —Ñ–∞–π–ª—ñ–≤")
        return jsonify(capsules)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞–ø—Å—É–ª: {e}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/api/capsule/<filename>', methods=['GET'])
def get_capsule_by_filename(filename):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–∞–ø—Å—É–ª—É –∑–∞ —ñ–º'—è–º —Ñ–∞–π–ª—É"""
    try:
        filepath = os.path.join(BASE_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({"error": "–ö–∞–ø—Å—É–ª–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"}), 404
        
        with open(filepath, 'r', encoding='utf-8') as f:
            capsule = json.load(f)
        
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞–ø—Å—É–ª—É: {filename}")
        return jsonify(capsule)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–∞–ø—Å—É–ª–∏ {filename}: {e}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ ISKALA/MOVA Viewer —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {BASE_DIR}")
    print("üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ http://localhost:5000")
    print("üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: http://localhost:5000/api/health")
    
    app.run(host='0.0.0.0', port=5000, debug=True) 