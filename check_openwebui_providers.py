#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ Open WebUI
"""

import requests
import json
import time

def check_openwebui_providers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ Open WebUI"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Open WebUI
        response = requests.get("http://localhost:3000", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Open WebUI –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Open WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Open WebUI: {e}")
        return False

def get_available_providers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    providers = [
        "OpenAI",
        "OpenRouter", 
        "Anthropic",
        "Google",
        "Custom",
        "Ollama"
    ]
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ Open WebUI:")
    for i, provider in enumerate(providers, 1):
        print(f"   {i}. {provider}")
    
    return providers

def test_openrouter_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter"""
    print("\nüîë –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter:")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á (–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π, —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞)
    test_key = "sk-or-v1-test-key"
    
    try:
        response = requests.get(
            "https://openrouter.ai/api/v1/models",
            headers={
                "Authorization": f"Bearer {test_key}",
                "Content-Type": "application/json"
            },
            timeout=10
        )
        
        if response.status_code == 401:
            print("‚úÖ OpenRouter API –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            return True
        elif response.status_code == 200:
            print("‚úÖ OpenRouter API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ö†Ô∏è OpenRouter API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter: {e}")
        return False

def show_model_examples():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π"""
    print("\nüéØ –ü—Ä–∏–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    
    models = [
        {
            "name": "Moonshot Kimi (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            "provider": "Custom",
            "base_url": "https://openrouter.ai/api/v1",
            "model_name": "moonshotai/kimi-k2",
            "context_length": 8192,
            "description": "100 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        },
        {
            "name": "GPT-4o Mini (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            "provider": "Custom", 
            "base_url": "https://openrouter.ai/api/v1",
            "model_name": "openai/gpt-4o-mini",
            "context_length": 128000,
            "description": "500 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        },
        {
            "name": "Claude 3 Haiku (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            "provider": "Custom",
            "base_url": "https://openrouter.ai/api/v1", 
            "model_name": "anthropic/claude-3-haiku",
            "context_length": 200000,
            "description": "100 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        }
    ]
    
    for i, model in enumerate(models, 1):
        print(f"\n{i}. {model['name']}")
        print(f"   Provider: {model['provider']}")
        print(f"   Base URL: {model['base_url']}")
        print(f"   Model Name: {model['model_name']}")
        print(f"   Context Length: {model['context_length']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}")

def show_setup_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print("\nüìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ Open WebUI")
    print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Models")
    print("4. –ù–∞–∂–º–∏—Ç–µ 'Add Model'")
    print("5. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è:")
    print("   - Provider: Custom")
    print("   - Base URL: https://openrouter.ai/api/v1")
    print("   - Model Name: moonshotai/kimi-k2")
    print("   - API Key: –≤–∞—à_–∫–ª—é—á_openrouter")
    print("   - Context Length: 8192")
    print("6. –ù–∞–∂–º–∏—Ç–µ 'Save'")

def check_iskala_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ISKALA"""
    try:
        response = requests.get("http://localhost:8001/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ISKALA Core –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ ISKALA
            models_response = requests.get("http://localhost:8001/api/openwebui/models", timeout=5)
            if models_response.status_code == 200:
                models = models_response.json()
                print("‚úÖ –ú–æ–¥–µ–ª–∏ ISKALA –¥–æ—Å—Ç—É–ø–Ω—ã:")
                for model in models.get("models", []):
                    print(f"   - {model['name']} ({model['id']})")
            return True
        else:
            print("‚ùå ISKALA Core –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ISKALA: {e}")
        return False

def main():
    print("üå∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ Open WebUI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_openwebui_providers()
    get_available_providers()
    test_openrouter_connection()
    show_model_examples()
    check_iskala_integration()
    
    print("\n" + "=" * 50)
    show_setup_instructions()
    
    print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("- OpenRouter Dashboard: https://openrouter.ai/keys")
    print("- –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: https://openrouter.ai/models")
    print("- Open WebUI: http://localhost:3000")
    print("- ISKALA API: http://localhost:8001")
    
    print("\nüí° –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:")
    print("- –ï—Å–ª–∏ 'OpenRouter' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'Custom'")
    print("- Base URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ: https://openrouter.ai/api/v1")
    print("- API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-or-v1-'")
    print("- –ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main() 