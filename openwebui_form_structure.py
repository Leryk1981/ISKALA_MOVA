#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ Open WebUI
"""

import requests
import json
import time

def analyze_openwebui_form():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–æ—Ä–º—ã Open WebUI"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–æ—Ä–º—ã Open WebUI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Open WebUI
    try:
        response = requests.get("http://localhost:3000", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Open WebUI –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Open WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

def show_form_fields():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã"""
    print("\nüìù –ü–æ–ª—è —Ñ–æ—Ä–º—ã 'Add Model' –≤ Open WebUI:")
    print("-" * 30)
    
    fields = [
        {
            "name": "Provider",
            "type": "dropdown",
            "required": True,
            "options": ["OpenAI", "OpenRouter", "Anthropic", "Google", "Custom", "Ollama"],
            "description": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –º–æ–¥–µ–ª–∏"
        },
        {
            "name": "Base URL", 
            "type": "text",
            "required": True,
            "default": "https://openrouter.ai/api/v1",
            "description": "–ë–∞–∑–æ–≤—ã–π URL API"
        },
        {
            "name": "Model Name",
            "type": "text", 
            "required": True,
            "examples": ["moonshotai/kimi-k2", "openai/gpt-4o-mini"],
            "description": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        },
        {
            "name": "API Key",
            "type": "password",
            "required": True,
            "format": "sk-or-v1-...",
            "description": "–ö–ª—é—á API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        },
        {
            "name": "Context Length",
            "type": "number",
            "required": False,
            "default": 8192,
            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö"
        },
        {
            "name": "Temperature",
            "type": "number",
            "required": False,
            "default": 0.7,
            "range": "0.0 - 2.0",
            "description": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        },
        {
            "name": "Max Tokens",
            "type": "number",
            "required": False,
            "default": 4096,
            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ"
        }
    ]
    
    for i, field in enumerate(fields, 1):
        print(f"\n{i}. {field['name']}")
        print(f"   –¢–∏–ø: {field['type']}")
        print(f"   –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: {'–î–∞' if field['required'] else '–ù–µ—Ç'}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {field['description']}")
        
        if 'options' in field:
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(field['options'])}")
        if 'default' in field:
            print(f"   –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {field['default']}")
        if 'examples' in field:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(field['examples'])}")
        if 'format' in field:
            print(f"   –§–æ—Ä–º–∞—Ç: {field['format']}")
        if 'range' in field:
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {field['range']}")

def show_openrouter_example():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter"""
    print("\nüéØ –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter:")
    print("-" * 30)
    
    example = {
        "Provider": "OpenRouter",
        "Base URL": "https://openrouter.ai/api/v1", 
        "Model Name": "moonshotai/kimi-k2",
        "API Key": "sk-or-v1-–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å",
        "Context Length": 8192,
        "Temperature": 0.7,
        "Max Tokens": 4096
    }
    
    for field, value in example.items():
        print(f"{field}: {value}")

def show_common_models():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    print("\nüìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenRouter:")
    print("-" * 30)
    
    models = [
        {
            "name": "moonshotai/kimi-k2",
            "provider": "Moonshot AI",
            "context": 8192,
            "free_requests": 100,
            "description": "–•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–¥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞"
        },
        {
            "name": "openai/gpt-4o-mini",
            "provider": "OpenAI",
            "context": 128000,
            "free_requests": 500,
            "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å"
        },
        {
            "name": "anthropic/claude-3-haiku",
            "provider": "Anthropic",
            "context": 200000,
            "free_requests": 100,
            "description": "–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è"
        },
        {
            "name": "google/gemini-pro",
            "provider": "Google",
            "context": 32768,
            "free_requests": 100,
            "description": "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å"
        }
    ]
    
    for i, model in enumerate(models, 1):
        print(f"\n{i}. {model['name']}")
        print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model['provider']}")
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {model['context']} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {model['free_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}")

def show_troubleshooting():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
    print("\nüîß –†–µ—à–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º:")
    print("-" * 30)
    
    problems = [
        {
            "problem": "–ù–µ –≤–∏–∂—É –ø–æ–ª–µ 'Model Name'",
            "solution": "1. –í—ã–±–µ—Ä–∏—Ç–µ 'Custom' –≤–º–µ—Å—Ç–æ 'OpenRouter'\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Base URL\n3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É"
        },
        {
            "problem": "–û—à–∏–±–∫–∞ 'Invalid API key'",
            "solution": "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'sk-or-v1-'\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ OpenRouter"
        },
        {
            "problem": "–û—à–∏–±–∫–∞ 'Model not found'",
            "solution": "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"
        },
        {
            "problem": "–§–æ—Ä–º–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
            "solution": "1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)\n2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Open WebUI"
        }
    ]
    
    for i, problem in enumerate(problems, 1):
        print(f"\n{i}. {problem['problem']}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {problem['solution']}")

def main():
    print("üå∫ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã Open WebUI")
    print("=" * 50)
    
    analyze_openwebui_form()
    show_form_fields()
    show_openrouter_example()
    show_common_models()
    show_troubleshooting()
    
    print("\n" + "=" * 50)
    print("üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
    print("2. Settings ‚Üí Models ‚Üí Add Model")
    print("3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –≤—ã—à–µ")
    print("4. –ù–∞–∂–º–∏—Ç–µ 'Save'")
    
    print("\nüí° –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:")
    print("- –ü–æ–ª–µ 'Model Name' –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ Provider")
    print("- –ï—Å–ª–∏ 'OpenRouter' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'Custom'")
    print("- Base URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ: https://openrouter.ai/api/v1")
    print("- API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-or-v1-'")

if __name__ == "__main__":
    main() 