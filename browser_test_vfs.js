// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–§–° –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ Open Web UI
// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç

console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –í–§–°...");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –í–§–°
try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –í–§–° –∏–∑ —Ñ–∞–π–ª–∞
    if (typeof IntegratedVFS !== 'undefined') {
        console.log("‚úÖ IntegratedVFS –∫–ª–∞—Å—Å –Ω–∞–π–¥–µ–Ω!");
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–§–°
        window.testVFS = new IntegratedVFS();
        console.log("‚úÖ –í–§–° –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        window.testVFS.getSystemStats().then(stats => {
            console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–§–°:", stats);
        }).catch(err => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err);
        });
        
        // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        window.testVFS.createProject("BrowserTestProject", "default").then(result => {
            console.log("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:", result);
            
            // –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            return window.testVFS.createFile("BrowserTestProject", "test.py", "print('Hello from Browser VFS!')");
        }).then(result => {
            console.log("‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω:", result);
            
            // –¢–µ—Å—Ç 4: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            return window.testVFS.readFile("BrowserTestProject", "test.py");
        }).then(result => {
            console.log("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", result);
            
            // –¢–µ—Å—Ç 5: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            return window.testVFS.listProjects();
        }).then(result => {
            console.log("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:", result);
            
            console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –í–§–° –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
            
        }).catch(err => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", err);
        });
        
    } else {
        console.log("‚ö†Ô∏è IntegratedVFS –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...");
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –í–§–° –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        window.testVFS = {
            projects: {},
            activeProject: null,
            
            createProject: function(name, template = 'default') {
                this.projects[name] = {
                    name: name,
                    files: {},
                    created: new Date().toISOString(),
                    template: template
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                if (template === 'default') {
                    this.projects[name].files['main.py'] = `# ${name} - –ø—Ä–æ–µ–∫—Ç\nprint("Hello from ${name}!")`;
                    this.projects[name].files['README.md'] = `# ${name}\n\n–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –í–§–° –±—Ä–∞—É–∑–µ—Ä–∞`;
                }
                
                this.activeProject = name;
                console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${name}" —Å–æ–∑–¥–∞–Ω (${template})`);
                return this.projects[name];
            },
            
            createFile: function(projectName, fileName, content) {
                if (!this.projects[projectName]) {
                    console.error(`‚ùå –ü—Ä–æ–µ–∫—Ç "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    return false;
                }
                
                this.projects[projectName].files[fileName] = content;
                console.log(`‚úÖ –§–∞–π–ª "${fileName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ "${projectName}"`);
                return true;
            },
            
            readFile: function(projectName, fileName) {
                const project = this.projects[projectName];
                if (!project || !project.files[fileName]) {
                    console.error(`‚ùå –§–∞–π–ª "${fileName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projectName}"`);
                    return null;
                }
                
                return {
                    path: fileName,
                    content: project.files[fileName],
                    size: project.files[fileName].length
                };
            },
            
            listProjects: function() {
                return Object.keys(this.projects).map(name => ({
                    name: name,
                    isActive: name === this.activeProject,
                    filesCount: Object.keys(this.projects[name].files).length
                }));
            },
            
            showProject: function(projectName) {
                const project = this.projects[projectName];
                if (!project) {
                    console.error(`‚ùå –ü—Ä–æ–µ–∫—Ç "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    return;
                }
                
                console.log(`üìÇ –ü—Ä–æ–µ–∫—Ç: ${project.name}`);
                console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${project.created}`);
                console.log(`üìÑ –§–∞–π–ª—ã:`);
                
                Object.keys(project.files).forEach(fileName => {
                    const size = project.files[fileName].length;
                    console.log(`  üìÑ ${fileName} (${size} —Å–∏–º–≤–æ–ª–æ–≤)`);
                });
            },
            
            exportProject: function(projectName) {
                const project = this.projects[projectName];
                if (!project) {
                    console.error(`‚ùå –ü—Ä–æ–µ–∫—Ç "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    return;
                }
                
                const exportData = JSON.stringify(project, null, 2);
                console.log(`üì¶ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ "${projectName}":`);
                console.log(exportData);
                
                // –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                const blob = new Blob([exportData], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `${projectName}.json`;
                a.click();
                URL.revokeObjectURL(url);
                
                return exportData;
            }
        };
        
        console.log("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –í–§–° —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        
        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –í–§–°
        console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...");
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        window.testVFS.createProject("TestProject", "default");
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        window.testVFS.createFile("TestProject", "calculator.py", `
def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

if __name__ == "__main__":
    print("Calculator ready!")
    print("2 + 3 =", add(2, 3))
    print("5 - 2 =", subtract(5, 2))
`);
        
        // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–∞
        window.testVFS.showProject("TestProject");
        
        // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fileContent = window.testVFS.readFile("TestProject", "calculator.py");
        console.log("üìñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ calculator.py:", fileContent);
        
        // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const projects = window.testVFS.listProjects();
        console.log("üìã –ü—Ä–æ–µ–∫—Ç—ã:", projects);
        
        console.log("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    }
    
    // –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    console.log(`
üÜò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- testVFS.createProject(name, template)
- testVFS.createFile(project, filename, content)  
- testVFS.readFile(project, filename)
- testVFS.showProject(project)
- testVFS.listProjects()
- testVFS.exportProject(project)

üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
testVFS.createProject("MyParser", "default");
testVFS.createFile("MyParser", "main.py", "print('Hello!')");
testVFS.showProject("MyParser");
testVFS.exportProject("MyParser");
`);
    
} catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –í–§–°:", error);
    console.log("üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–∞–≥–∏–Ω–∞");
} 