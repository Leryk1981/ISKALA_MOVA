#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Open WebUI –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
"""

import requests
import json
import time

def check_openwebui_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Open WebUI"""
    try:
        response = requests.get("http://localhost:3000", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Open WebUI –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Open WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def check_openwebui_usage():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Open WebUI"""
    try:
        response = requests.get("http://localhost:3000/api/usage", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API usage –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå API usage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API usage: {e}")
        return False

def check_iskala_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ISKALA"""
    try:
        response = requests.get("http://localhost:8001/api/openwebui/models", timeout=5)
        if response.status_code == 200:
            models = response.json()
            print("‚úÖ –ú–æ–¥–µ–ª–∏ ISKALA –¥–æ—Å—Ç—É–ø–Ω—ã:")
            for model in models.get("models", []):
                print(f"   - {model['name']} ({model['id']})")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ ISKALA: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ISKALA: {e}")
        return False

def show_openwebui_setup_guide():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Open WebUI"""
    print("\nüìã –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Open WebUI:")
    print("=" * 50)
    
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑)")
    print("3. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    print("4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Models")
    print("5. –ù–∞–∂–º–∏—Ç–µ 'Add Model'")
    print("6. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:")
    print("   Provider: OpenRouter")
    print("   Base URL: https://openrouter.ai/api/v1")
    print("   Model Name: moonshotai/kimi-k2")
    print("   API Key: –≤–∞—à_–∫–ª—é—á_openrouter")
    print("   Context Length: 8192")
    print("7. –ù–∞–∂–º–∏—Ç–µ 'Save'")

def show_alternative_solutions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
    print("\nüîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("=" * 50)
    
    solutions = [
        {
            "title": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ISKALA –º–æ–¥–µ–ª–∏",
            "description": "–ú–æ–¥–µ–ª–∏ ISKALA —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã",
            "action": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ISKALA MOVA v2 –≤–º–µ—Å—Ç–æ OpenRouter"
        },
        {
            "title": "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Open WebUI",
            "description": "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
            "action": "docker-compose restart open-webui"
        },
        {
            "title": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞",
            "description": "–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "action": "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        },
        {
            "title": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Custom –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
            "description": "–í–º–µ—Å—Ç–æ OpenRouter –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Custom",
            "action": "Provider: Custom, Base URL: https://openrouter.ai/api/v1"
        }
    ]
    
    for i, solution in enumerate(solutions, 1):
        print(f"\n{i}. {solution['title']}")
        print(f"   {solution['description']}")
        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {solution['action']}")

def show_iskala_models_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö ISKALA"""
    print("\nüéØ –ú–æ–¥–µ–ª–∏ ISKALA (—É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç):")
    print("=" * 50)
    
    models = [
        {
            "name": "ISKALA MOVA v2",
            "id": "iskala-mova-v2",
            "description": "–û—Å–Ω–æ–≤–Ω–∞—è —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å",
            "features": ["–ß–∞—Ç", "–ê–Ω–∞–ª–∏–∑", "–ö–æ–Ω—Ç–µ–∫—Å—Ç"]
        },
        {
            "name": "ISKALA RAG",
            "id": "iskala-rag",
            "description": "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö",
            "features": ["RAG", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ü–æ–∏—Å–∫"]
        },
        {
            "name": "ISKALA Translation",
            "id": "iskala-translation",
            "description": "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
            "features": ["–ü–µ—Ä–µ–≤–æ–¥", "–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è"]
        }
    ]
    
    for model in models:
        print(f"\nüìå {model['name']}")
        print(f"   ID: {model['id']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}")
        print(f"   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(model['features'])}")

def show_troubleshooting_steps():
    """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–ª–∞–¥–æ–∫"""
    print("\nüîç –®–∞–≥–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–ª–∞–¥–æ–∫:")
    print("=" * 50)
    
    steps = [
        "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É Open WebUI",
        "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è",
        "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs open-webui --tail 20",
        "6. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä",
        "7. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞"
    ]
    
    for step in steps:
        print(f"   {step}")

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Open WebUI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_openwebui_health()
    check_openwebui_usage()
    check_iskala_integration()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    show_iskala_models_info()
    show_openwebui_setup_guide()
    show_alternative_solutions()
    show_troubleshooting_steps()
    
    print("\n" + "=" * 50)
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ ISKALA")
    print("2. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω OpenRouter - —Å–ª–µ–¥—É–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –≤—ã—à–µ")
    print("3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Open WebUI")
    
    print("\nüöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ISKALA MOVA v2 –¥–ª—è –Ω–∞—á–∞–ª–∞")

if __name__ == "__main__":
    main() 