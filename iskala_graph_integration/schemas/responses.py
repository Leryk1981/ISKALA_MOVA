"""
üìä Response Models for ISKALA Graph Integration
Pydantic models for Tool Server API responses
"""

from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field
from datetime import datetime

class GraphSearchResult(BaseModel):
    """Individual search result item"""
    
    id: str = Field(
        ...,
        description="–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É",
        example="chunk_abc123"
    )
    
    content: str = Field(
        ...,
        description="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É",
        example="–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç - —Ü–µ –≥–∞–ª—É–∑—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏..."
    )
    
    language: str = Field(
        ...,
        description="–ú–æ–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É",
        example="uk"
    )
    
    source_doc: str = Field(
        ...,
        description="–î–∂–µ—Ä–µ–ª—å–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç",
        example="ai_intro_uk.md"
    )
    
    # Scoring breakdown
    vector_score: float = Field(
        default=0.0,
        ge=0.0,
        le=1.0,
        description="–û—Ü—ñ–Ω–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó —Å—Ö–æ–∂–æ—Å—Ç—ñ"
    )
    
    graph_score: float = Field(
        default=0.0,
        ge=0.0,
        le=1.0,
        description="–û—Ü—ñ–Ω–∫–∞ –≥—Ä–∞—Ñ–æ–≤–æ—ó –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ"
    )
    
    intent_score: float = Field(
        default=0.0,
        ge=0.0,
        le=1.0,
        description="–û—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞–º—ñ—Ä—É"
    )
    
    combined_score: float = Field(
        ...,
        ge=0.0,
        le=1.0,
        description="–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É",
        example=0.85
    )
    
    # Result metadata
    result_type: str = Field(
        default="hybrid",
        description="–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: vector, graph, hybrid",
        example="hybrid"
    )
    
    intent_name: Optional[str] = Field(
        None,
        description="–ü–æ–≤'—è–∑–∞–Ω–∏–π –Ω–∞–º—ñ—Ä",
        example="learning"
    )
    
    graph_distance: int = Field(
        default=0,
        ge=0,
        description="–í—ñ–¥—Å—Ç–∞–Ω—å –≤ –≥—Ä–∞—Ñ—ñ –∑–Ω–∞–Ω—å –≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞"
    )
    
    metadata: Dict[str, Any] = Field(
        default_factory=dict,
        description="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"
    )
    
    highlight: Optional[str] = Field(
        None,
        description="–ü—ñ–¥—Å–≤—ñ—á–µ–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç—É –∑ –∑–∞–ø–∏—Ç–æ–º"
    )

class SearchFacets(BaseModel):
    """Search result facets and aggregations"""
    
    languages: Dict[str, int] = Field(
        default_factory=dict,
        description="–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –º–æ–≤–∞–º–∏",
        example={"uk": 15, "en": 10, "ru": 5}
    )
    
    intents: Dict[str, int] = Field(
        default_factory=dict,
        description="–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –Ω–∞–º—ñ—Ä–∞–º–∏",
        example={"learning": 12, "reference": 8}
    )
    
    sources: Dict[str, int] = Field(
        default_factory=dict,
        description="–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏",
        example={"ai_intro.md": 5, "ml_guide.pdf": 3}
    )
    
    result_types: Dict[str, int] = Field(
        default_factory=dict,
        description="–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ç–∏–ø–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
        example={"hybrid": 10, "vector": 5, "graph": 5}
    )

class GraphSearchResponse(BaseModel):
    """Response model for search operations"""
    
    query: str = Field(
        ...,
        description="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç",
        example="—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç"
    )
    
    results: List[GraphSearchResult] = Field(
        ...,
        description="–°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É"
    )
    
    total_results: int = Field(
        ...,
        ge=0,
        description="–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
        example=15
    )
    
    # Performance metrics
    search_time_ms: float = Field(
        ...,
        ge=0.0,
        description="–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö",
        example=125.5
    )
    
    cache_hit: bool = Field(
        default=False,
        description="–ß–∏ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à—É–≤–∞–Ω–Ω—è",
        example=False
    )
    
    # Search strategy breakdown
    vector_results_count: int = Field(
        default=0,
        ge=0,
        description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    )
    
    graph_results_count: int = Field(
        default=0,
        ge=0,
        description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞—Ñ–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    )
    
    hybrid_results_count: int = Field(
        default=0,
        ge=0,
        description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—ñ–±—Ä–∏–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    )
    
    # Optional facets
    facets: Optional[SearchFacets] = Field(
        None,
        description="–ê–≥—Ä–µ–≥–∞—Ü—ñ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É"
    )
    
    # Query analysis
    query_analysis: Dict[str, Any] = Field(
        default_factory=dict,
        description="–ê–Ω–∞–ª—ñ–∑ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"
    )
    
    # Response metadata
    language_filter: Optional[str] = Field(
        None,
        description="–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π –º–æ–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä"
    )
    
    intent_filter: Optional[str] = Field(
        None,
        description="–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –Ω–∞–º—ñ—Ä—É"
    )
    
    timestamp: str = Field(
        default_factory=lambda: datetime.utcnow().isoformat(),
        description="–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
    )

class GraphPathNode(BaseModel):
    """Node in a graph path"""
    
    id: str = Field(..., description="–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—É–∑–ª–∞")
    type: str = Field(..., description="–¢–∏–ø –≤—É–∑–ª–∞", example="ContextChunk")
    content: Optional[str] = Field(None, description="–ö–æ–Ω—Ç–µ–Ω—Ç –≤—É–∑–ª–∞")
    metadata: Dict[str, Any] = Field(default_factory=dict)

class GraphPathRelationship(BaseModel):
    """Relationship in a graph path"""
    
    type: str = Field(..., description="–¢–∏–ø –∑–≤'—è–∑–∫—É", example="LEADS_TO")
    properties: Dict[str, Any] = Field(default_factory=dict)

class GraphPath(BaseModel):
    """Individual path through the knowledge graph"""
    
    start_node_id: str = Field(..., description="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤—É–∑–æ–ª")
    end_node_id: str = Field(..., description="–ö—ñ–Ω—Ü–µ–≤–∏–π –≤—É–∑–æ–ª")
    path_length: int = Field(..., ge=1, description="–î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É")
    confidence: float = Field(..., ge=0.0, le=1.0, description="–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —à–ª—è—Ö—É")
    
    nodes: List[GraphPathNode] = Field(..., description="–í—É–∑–ª–∏ –≤ —à–ª—è—Ö—É")
    relationships: List[GraphPathRelationship] = Field(..., description="–ó–≤'—è–∑–∫–∏ –≤ —à–ª—è—Ö—É")
    
    path_summary: str = Field(..., description="–û–ø–∏—Å —à–ª—è—Ö—É")

class GraphWalkResponse(BaseModel):
    """Response model for graph walk operations"""
    
    start_node_id: str = Field(
        ...,
        description="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤—É–∑–æ–ª –æ–±—Ö–æ–¥—É",
        example="chunk_abc123"
    )
    
    paths: List[GraphPath] = Field(
        ...,
        description="–ó–Ω–∞–π–¥–µ–Ω—ñ —à–ª—è—Ö–∏ –≤ –≥—Ä–∞—Ñ—ñ"
    )
    
    total_paths: int = Field(
        ...,
        ge=0,
        description="–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —à–ª—è—Ö—ñ–≤",
        example=8
    )
    
    max_depth_reached: int = Field(
        ...,
        ge=1,
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞ –≥–ª–∏–±–∏–Ω–∞",
        example=3
    )
    
    walk_time_ms: float = Field(
        ...,
        ge=0.0,
        description="–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—Ö–æ–¥—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö",
        example=45.2
    )

class GraphSuggestionsResponse(BaseModel):
    """Response model for search suggestions"""
    
    partial_query: str = Field(
        ...,
        description="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —á–∞—Å—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç",
        example="–º–∞—à–∏–Ω"
    )
    
    suggestions: List[str] = Field(
        ...,
        description="–°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫",
        example=["–º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è", "–º–∞—à–∏–Ω–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥", "–º–∞—à–∏–Ω–Ω–µ –±–∞—á–µ–Ω–Ω—è"]
    )
    
    suggestion_count: int = Field(
        ...,
        ge=0,
        description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–∫–∞–∑–æ–∫",
        example=5
    )
    
    generation_time_ms: float = Field(
        ...,
        ge=0.0,
        description="–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–∫–∞–∑–æ–∫ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö",
        example=15.8
    )
    
    language_filter: Optional[str] = Field(
        None,
        description="–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π –º–æ–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä"
    )

class ComponentStatus(BaseModel):
    """Status of individual service component"""
    
    status: str = Field(
        ...,
        description="–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É",
        example="healthy"
    )
    
    response_time_ms: Optional[float] = Field(
        None,
        description="–ß–∞—Å –≤—ñ–¥–≥—É–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É"
    )
    
    details: Dict[str, Any] = Field(
        default_factory=dict,
        description="–î–µ—Ç–∞–ª—ñ —Å—Ç–∞—Ç—É—Å—É"
    )
    
    last_check: str = Field(
        default_factory=lambda: datetime.utcnow().isoformat(),
        description="–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
    )

class GraphStatusResponse(BaseModel):
    """Response model for service status"""
    
    service: str = Field(
        default="ISKALA Graph Search",
        description="–ù–∞–∑–≤–∞ —Å–µ—Ä–≤—ñ—Å—É"
    )
    
    status: str = Field(
        ...,
        description="–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å",
        example="healthy"
    )
    
    components: Dict[str, ComponentStatus] = Field(
        ...,
        description="–°—Ç–∞—Ç—É—Å –æ–∫—Ä–µ–º–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"
    )
    
    # Performance statistics
    performance: Dict[str, Any] = Field(
        default_factory=dict,
        description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
    )
    
    # System info
    uptime_seconds: Optional[float] = Field(
        None,
        description="–ß–∞—Å —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    version: str = Field(
        default="1.0.0",
        description="–í–µ—Ä—Å—ñ—è —Å–µ—Ä–≤—ñ—Å—É"
    )
    
    timestamp: str = Field(
        default_factory=lambda: datetime.utcnow().isoformat(),
        description="–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç–∞—Ç—É—Å—É"
    )

# Base response model with common fields
class BaseGraphResponse(BaseModel):
    """Base response model with common fields"""
    
    success: bool = Field(
        default=True,
        description="–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó"
    )
    
    error_message: Optional[str] = Field(
        None,
        description="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (—è–∫—â–æ —î)"
    )
    
    request_id: Optional[str] = Field(
        None,
        description="–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è"
    )

# Export all response models
__all__ = [
    "GraphSearchResult",
    "SearchFacets",
    "GraphSearchResponse",
    "GraphPath",
    "GraphPathNode", 
    "GraphPathRelationship",
    "GraphWalkResponse",
    "GraphSuggestionsResponse",
    "ComponentStatus",
    "GraphStatusResponse",
    "BaseGraphResponse"
] 