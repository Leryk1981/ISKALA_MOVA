"""
üìã Request Models for ISKALA Graph Integration
Pydantic models for Tool Server API requests
"""

from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field, validator

class GraphHybridSearchRequest(BaseModel):
    """Request model for hybrid semantic search"""
    
    query: str = Field(
        ...,
        min_length=1,
        max_length=1000,
        description="–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç",
        example="—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è"
    )
    
    language: Optional[str] = Field(
        None,
        description="–ú–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (uk, en, zh, ru, etc.)",
        example="uk"
    )
    
    k: int = Field(
        default=5,
        ge=1,
        le=50,
        description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
        example=5
    )
    
    intent_filter: Optional[str] = Field(
        None,
        description="–§—ñ–ª—å—Ç—Ä –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –Ω–∞–º—ñ—Ä–æ–º",
        example="learning"
    )
    
    include_facets: bool = Field(
        default=False,
        description="–í–∫–ª—é—á–∏—Ç–∏ –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
        example=False
    )
    
    # Advanced search parameters
    vector_weight: float = Field(
        default=0.4,
        ge=0.0,
        le=1.0,
        description="–í–∞–≥–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó —Å—Ö–æ–∂–æ—Å—Ç—ñ –≤ –≥—ñ–±—Ä–∏–¥–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É"
    )
    
    graph_weight: float = Field(
        default=0.3, 
        ge=0.0,
        le=1.0,
        description="–í–∞–≥–∞ –≥—Ä–∞—Ñ–æ–≤–æ—ó –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É"
    )
    
    intent_weight: float = Field(
        default=0.2,
        ge=0.0,
        le=1.0,
        description="–í–∞–≥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞–º—ñ—Ä—É"
    )
    
    language_weight: float = Field(
        default=0.1,
        ge=0.0, 
        le=1.0,
        description="–í–∞–≥–∞ –º–æ–≤–Ω–æ—ó –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ"
    )
    
    @validator('query')
    def validate_query(cls, v):
        if not v.strip():
            raise ValueError("–ó–∞–ø–∏—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        return v.strip()
    
    @validator('language')
    def validate_language(cls, v):
        if v is not None:
            valid_languages = ['uk', 'en', 'ru', 'zh', 'de', 'fr', 'es', 'it', 'pl']
            if v not in valid_languages:
                raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –º–æ–≤–∞: {v}. –î–æ—Å—Ç—É–ø–Ω—ñ: {valid_languages}")
        return v
    
    @validator('vector_weight', 'graph_weight', 'intent_weight', 'language_weight')
    def validate_weights_sum(cls, v, values):
        # Validate that weights approximately sum to 1.0
        weights = [v]
        if 'vector_weight' in values:
            weights.append(values['vector_weight'])
        if 'graph_weight' in values:
            weights.append(values['graph_weight'])
        if 'intent_weight' in values:
            weights.append(values['intent_weight'])
        if 'language_weight' in values:
            weights.append(values['language_weight'])
        
        if len(weights) == 4:  # All weights are set
            total = sum(weights)
            if abs(total - 1.0) > 0.01:
                raise ValueError(f"–°—É–º–∞ –≤–∞–≥ –ø–æ–≤–∏–Ω–Ω–∞ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 1.0, –æ—Ç—Ä–∏–º–∞–Ω–æ: {total}")
        
        return v

class GraphVectorSearchRequest(BaseModel):
    """Request model for vector-only semantic search"""
    
    query: str = Field(
        ...,
        min_length=1,
        max_length=1000,
        description="–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É",
        example="–Ω–µ–π—Ä–æ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ –≥–ª–∏–±–æ–∫–µ –Ω–∞–≤—á–∞–Ω–Ω—è"
    )
    
    language: Optional[str] = Field(
        None,
        description="–ú–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
        example="uk"
    )
    
    k: int = Field(
        default=5,
        ge=1,
        le=100,
        description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
        example=10
    )
    
    confidence_threshold: float = Field(
        default=0.0,
        ge=0.0,
        le=1.0,
        description="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ",
        example=0.3
    )
    
    @validator('query')
    def validate_query(cls, v):
        if not v.strip():
            raise ValueError("–ó–∞–ø–∏—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        return v.strip()

class GraphWalkRequest(BaseModel):
    """Request model for knowledge graph traversal"""
    
    start_node_id: str = Field(
        ...,
        description="–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –≤—É–∑–ª–∞ (chunk hash)",
        example="chunk_abc123"
    )
    
    max_depth: int = Field(
        default=3,
        ge=1,
        le=5,
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥–ª–∏–±–∏–Ω–∞ –æ–±—Ö–æ–¥—É –≥—Ä–∞—Ñ–∞",
        example=3
    )
    
    intent_filter: Optional[List[str]] = Field(
        None,
        description="–§—ñ–ª—å—Ç—Ä —à–ª—è—Ö—ñ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –Ω–∞–º—ñ—Ä–∞–º–∏",
        example=["learning", "research"]
    )
    
    include_confidence: bool = Field(
        default=True,
        description="–í–∫–ª—é—á–∏—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –¥–ª—è —à–ª—è—Ö—ñ–≤",
        example=True
    )
    
    @validator('start_node_id')
    def validate_start_node_id(cls, v):
        if not v.strip():
            raise ValueError("–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—É–∑–ª–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        return v.strip()

class GraphSuggestionsRequest(BaseModel):
    """Request model for search suggestions"""
    
    partial_query: str = Field(
        ...,
        min_length=1,
        max_length=100,
        description="–ß–∞—Å—Ç–∫–æ–≤–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø—ñ–¥–∫–∞–∑–æ–∫",
        example="–º–∞—à–∏–Ω"
    )
    
    language: Optional[str] = Field(
        None,
        description="–ú–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø—ñ–¥–∫–∞–∑–æ–∫",
        example="uk"
    )
    
    limit: int = Field(
        default=10,
        ge=1,
        le=20,
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–∫–∞–∑–æ–∫",
        example=5
    )
    
    @validator('partial_query')
    def validate_partial_query(cls, v):
        if not v.strip():
            raise ValueError("–ß–∞—Å—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        return v.strip()

# Base request model for common parameters
class BaseGraphRequest(BaseModel):
    """Base request model with common parameters"""
    
    user_id: Optional[str] = Field(
        None,
        description="–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó"
    )
    
    session_id: Optional[str] = Field(
        None,
        description="–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å–µ—Å—ñ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"
    )
    
    metadata: Optional[Dict[str, Any]] = Field(
        default_factory=dict,
        description="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É"
    )

# Export all request models
__all__ = [
    "GraphHybridSearchRequest",
    "GraphVectorSearchRequest",
    "GraphWalkRequest", 
    "GraphSuggestionsRequest",
    "BaseGraphRequest"
] 