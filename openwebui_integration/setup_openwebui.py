#!/usr/bin/env python3
"""
Open WebUI Setup Script for ISKALA Integration
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Open WebUI –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ ISKALA
"""

import os
import sys
import json
import requests
import time
import subprocess
from pathlib import Path

class OpenWebUISetup:
    def __init__(self):
        self.openwebui_url = "http://localhost:3000"
        self.iskala_url = "http://localhost:8001"
        self.config_dir = Path("./openwebui_integration")
        self.setup_dir = Path("./openwebui_setup")
        self.setup_dir.mkdir(exist_ok=True)
        
    def check_docker(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker"""
        try:
            result = subprocess.run(["docker", "--version"], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Docker –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")
                return True
        except Exception as e:
            print(f"‚ùå Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π: {e}")
        return False
    
    def start_openwebui(self):
        """–ó–∞–ø—É—Å–∫ Open WebUI"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ Open WebUI...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π
            result = subprocess.run(["docker", "ps", "--filter", "name=open-webui"], 
                                  capture_output=True, text=True)
            
            if "open-webui" in result.stdout:
                print("‚úÖ Open WebUI –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π")
                return True
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ Open WebUI
            cmd = [
                "docker", "run", "-d",
                "-p", "3000:8080",
                "--add-host=host.docker.internal:host-gateway",
                "-v", "open-webui:/app/backend/data",
                "--name", "open-webui",
                "--restart", "always",
                "ghcr.io/open-webui/open-webui:main"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Open WebUI –∑–∞–ø—É—â–µ–Ω–∏–π")
                return True
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Open WebUI: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Open WebUI: {e}")
            return False
    
    def wait_for_openwebui(self, timeout=60):
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É Open WebUI"""
        print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É Open WebUI...")
        
        for i in range(timeout):
            try:
                response = requests.get(f"{self.openwebui_url}/api/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Open WebUI –≥–æ—Ç–æ–≤–∏–π")
                    return True
            except:
                pass
            
            time.sleep(1)
            if i % 10 == 0:
                print(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è... ({i}/{timeout})")
        
        print("‚ùå Open WebUI –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è –∑–∞ –≤—ñ–¥–≤–µ–¥–µ–Ω–∏–π —á–∞—Å")
        return False
    
    def configure_openwebui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Open WebUI –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ ISKALA"""
        try:
            print("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Open WebUI...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            config_file = self.config_dir / "openwebui_config.json"
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è Open WebUI
            openwebui_config = {
                "custom_models": config["iskala_integration"]["models"],
                "custom_endpoints": {
                    "iskala": {
                        "base_url": self.iskala_url,
                        "api_key": "",
                        "models": config["iskala_integration"]["models"]
                    }
                },
                "default_model": "iskala-mova-v2",
                "enable_custom_models": True,
                "iskala_integration": config["iskala_integration"]
            }
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            setup_config_file = self.setup_dir / "openwebui_iskala_config.json"
            with open(setup_config_file, 'w', encoding='utf-8') as f:
                json.dump(openwebui_config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {setup_config_file}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            instructions = self.create_setup_instructions()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return False
    
    def create_setup_instructions(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        instructions = f"""
# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Open WebUI –∑ ISKALA

## 1. –î–æ—Å—Ç—É–ø –¥–æ Open WebUI
–í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä —ñ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ: {self.openwebui_url}

## 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
1. –£–≤—ñ–π–¥—ñ—Ç—å –≤ Open WebUI
2. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ Settings -> Models
3. –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ –º–æ–¥–µ–ª—ñ:

### ISKALA MOVA v2
- Provider: Custom
- Base URL: {self.iskala_url}
- Model Name: iskala-mova-v2
- API Key: (–∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º)

### ISKALA RAG
- Provider: Custom  
- Base URL: {self.iskala_url}
- Model Name: iskala-rag
- API Key: (–∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º)

### ISKALA Translation
- Provider: Custom
- Base URL: {self.iskala_url}
- Model Name: iskala-translation
- API Key: (–∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º)

## 3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API Endpoints
–î–æ–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ endpoints:

### Chat Endpoint
- URL: {self.iskala_url}/api/openwebui/chat
- Method: POST
- Headers: Content-Type: application/json

### Models Endpoint
- URL: {self.iskala_url}/api/openwebui/models
- Method: GET

### Status Endpoint
- URL: {self.iskala_url}/api/openwebui/status
- Method: GET

## 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
1. –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å "ISKALA MOVA v2"
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?"
3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

## 5. –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
- RAG —Å–∏—Å—Ç–µ–º–∞: {self.iskala_url}/api/memory/search
- –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: {self.iskala_url}/api/tools
- WebSocket: ws://localhost:8001/ws

## 6. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–í—ñ–¥–∫—Ä–∏–π—Ç–µ: {self.config_dir}/iskala_openwebui_integration.html

---
–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ: {time.strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        instructions_file = self.setup_dir / "setup_instructions.md"
        with open(instructions_file, 'w', encoding='utf-8') as f:
            f.write(instructions)
        
        print(f"‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω—ñ: {instructions_file}")
        return instructions_file
    
    def create_quick_start_script(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É"""
        script_content = f"""#!/bin/bash
# Quick Start Script –¥–ª—è ISKALA + Open WebUI

echo "üå∫ –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç ISKALA + Open WebUI"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ISKALA
echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ISKALA..."
if curl -s {self.iskala_url}/health > /dev/null; then
    echo "‚úÖ ISKALA –ø—Ä–∞—Ü—é—î"
else
    echo "‚ùå ISKALA –Ω–µ –ø—Ä–∞—Ü—é—î. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: docker-compose up -d"
    exit 1
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Open WebUI
echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Open WebUI..."
if curl -s {self.openwebui_url}/api/health > /dev/null; then
    echo "‚úÖ Open WebUI –ø—Ä–∞—Ü—é—î"
else
    echo "‚ùå Open WebUI –Ω–µ –ø—Ä–∞—Ü—é—î. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: docker start open-webui"
    exit 1
fi

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤
echo "üåê –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤..."

if command -v xdg-open > /dev/null; then
    xdg-open {self.openwebui_url}
    xdg-open {self.config_dir}/iskala_openwebui_integration.html
elif command -v open > /dev/null; then
    open {self.openwebui_url}
    open {self.config_dir}/iskala_openwebui_integration.html
else
    echo "üìã –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ:"
    echo "  Open WebUI: {self.openwebui_url}"
    echo "  –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è: {self.config_dir}/iskala_openwebui_integration.html"
fi

echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞."
"""
        
        script_file = self.setup_dir / "quick_start.sh"
        with open(script_file, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        os.chmod(script_file, 0o755)
        print(f"‚úÖ –°–∫—Ä–∏–ø—Ç —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {script_file}")
        return script_file
    
    def run_setup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        print("üå∫ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Open WebUI –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ ISKALA")
        print("=" * 60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
        if not self.check_docker():
            print("‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
            return False
        
        # –ó–∞–ø—É—Å–∫ Open WebUI
        if not self.start_openwebui():
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Open WebUI")
            return False
        
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
        if not self.wait_for_openwebui():
            print("‚ùå Open WebUI –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è")
            return False
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if not self.configure_openwebui():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            return False
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        self.create_quick_start_script()
        
        print("\n‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("\nüìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Open WebUI: http://localhost:3000")
        print("2. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–æ–¥–µ–ª—ñ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é")
        print(f"4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {self.config_dir}/iskala_openwebui_integration.html")
        
        return True

def main():
    setup = OpenWebUISetup()
    setup.run_setup()

if __name__ == "__main__":
    main() 