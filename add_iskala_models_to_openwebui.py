#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ISKALA –≤ Open WebUI
"""

import requests
import json
import time

def get_iskala_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π ISKALA"""
    try:
        response = requests.get("http://localhost:8001/api/openwebui/models", timeout=5)
        if response.status_code == 200:
            return response.json().get("models", [])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ISKALA: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ISKALA: {e}")
        return []

def create_iskala_model_config(model):
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ ISKALA –¥–ª—è Open WebUI"""
    return {
        "name": model["name"],
        "model": model["id"],
        "base_url": "http://localhost:8001",
        "api_key": "",  # ISKALA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á
        "context_length": model.get("context_length", 8192),
        "temperature": 0.7,
        "max_tokens": 4096,
        "provider": "Custom"
    }

def show_iskala_models_setup():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥–µ–ª–µ–π ISKALA"""
    print("\nüéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π ISKALA –≤ Open WebUI:")
    print("=" * 50)
    
    models = get_iskala_models()
    
    if not models:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ ISKALA")
        return
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ ISKALA:")
    for i, model in enumerate(models, 1):
        print(f"\n{i}. {model['name']} ({model['id']})")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Open WebUI
        config = create_iskala_model_config(model)
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Open WebUI:")
        print(f"   - Provider: {config['provider']}")
        print(f"   - Base URL: {config['base_url']}")
        print(f"   - Model Name: {config['model']}")
        print(f"   - API Key: (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)")
        print(f"   - Context Length: {config['context_length']}")

def show_manual_setup_steps():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
    print("\nüìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ISKALA:")
    print("=" * 50)
    
    steps = [
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000",
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É Open WebUI",
        "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Models",
        "4. –ù–∞–∂–º–∏—Ç–µ 'Add Model'",
        "5. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ ISKALA:",
        "",
        "   –î–ª—è ISKALA MOVA v2:",
        "   - Provider: Custom",
        "   - Base URL: http://localhost:8001",
        "   - Model Name: iskala-mova-v2",
        "   - API Key: (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)",
        "   - Context Length: 8192",
        "",
        "   –î–ª—è ISKALA RAG:",
        "   - Provider: Custom",
        "   - Base URL: http://localhost:8001",
        "   - Model Name: iskala-rag",
        "   - API Key: (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)",
        "   - Context Length: 16384",
        "",
        "   –î–ª—è ISKALA Translation:",
        "   - Provider: Custom",
        "   - Base URL: http://localhost:8001",
        "   - Model Name: iskala-translation",
        "   - API Key: (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)",
        "   - Context Length: 4096",
        "",
        "6. –ù–∞–∂–º–∏—Ç–µ 'Save' –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏",
        "7. –ú–æ–¥–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
    ]
    
    for step in steps:
        print(f"   {step}")

def show_quick_test():
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π"""
    print("\nüß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π ISKALA:")
    print("=" * 50)
    
    test_models = [
        {
            "name": "ISKALA MOVA v2",
            "id": "iskala-mova-v2",
            "test_message": "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?"
        },
        {
            "name": "ISKALA RAG",
            "id": "iskala-rag",
            "test_message": "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ ISKALA RAG —Å–∏—Å—Ç–µ–º—É"
        },
        {
            "name": "ISKALA Translation",
            "id": "iskala-translation",
            "test_message": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ 'Hello world' –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É"
        }
    ]
    
    for model in test_models:
        print(f"\nüìå –¢–µ—Å—Ç {model['name']}:")
        print(f"   ID: {model['id']}")
        print(f"   –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{model['test_message']}'")
        print(f"   API: POST http://localhost:8001/api/openwebui/chat")
        print(f"   Body: {{\"message\": \"{model['test_message']}\", \"model_id\": \"{model['id']}\"}}")

def show_troubleshooting():
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫"""
    print("\nüîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫:")
    print("=" * 50)
    
    problems = [
        {
            "problem": "–ú–æ–¥–µ–ª–∏ ISKALA –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ",
            "solution": "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ ISKALA Core –∑–∞–ø—É—â–µ–Ω\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Base URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: http://localhost:8001\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ ISKALA: docker logs iskala-core"
        },
        {
            "problem": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ISKALA",
            "solution": "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker ps\n2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ ISKALA: docker restart iskala-core\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç 8001: curl http://localhost:8001/health"
        },
        {
            "problem": "Open WebUI –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª–∏",
            "solution": "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä\n4. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞"
        }
    ]
    
    for i, problem in enumerate(problems, 1):
        print(f"\n{i}. {problem['problem']}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {problem['solution']}")

def main():
    print("üå∫ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ISKALA –≤ Open WebUI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π ISKALA
    models = get_iskala_models()
    if models:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π ISKALA")
    else:
        print("‚ùå –ú–æ–¥–µ–ª–∏ ISKALA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_iskala_models_setup()
    show_manual_setup_steps()
    show_quick_test()
    show_troubleshooting()
    
    print("\n" + "=" * 50)
    print("üí° –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:")
    print("1. –ú–æ–¥–µ–ª–∏ ISKALA —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("2. –ò—Ö –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Open WebUI")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Provider: Custom –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π ISKALA")
    print("4. Base URL –≤—Å–µ–≥–¥–∞: http://localhost:8001")
    print("5. API Key –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø—É—Å—Ç—ã–º")
    
    print("\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:")
    print("1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ ISKALA MOVA v2 (–æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å)")
    print("2. –ó–∞—Ç–µ–º ISKALA RAG (–¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")
    print("3. –ü–æ—Ç–æ–º ISKALA Translation (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞)")
    print("4. –í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤—å—Ç–µ OpenRouter –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    main() 